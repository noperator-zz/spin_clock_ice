
/*******************************************************************************
    Verilog netlist generated by IPGEN Radiant Software (64-bit) 1.1.0.165.1
    Soft IP Version: 1.0.0
    Sun Sep 01 07:14:32 2019
*******************************************************************************/
/*******************************************************************************
    Wrapper Module generated per user settings.
*******************************************************************************/
module smi_fifo (wr_clk_i, rd_clk_i, rst_i, rp_rst_i, wr_en_i, rd_en_i, wr_data_i, full_o, empty_o, almost_full_o, almost_empty_o, rd_data_o) ;
    input wr_clk_i ; 
    input rd_clk_i ; 
    input rst_i ; 
    input rp_rst_i ; 
    input wr_en_i ; 
    input rd_en_i ; 
    input [7:0] wr_data_i ; 
    output full_o ; 
    output empty_o ; 
    output almost_full_o ; 
    output almost_empty_o ; 
    output [7:0] rd_data_o ; 
    smi_fifo_ipgen_lscc_fifo_dc #(.WADDR_DEPTH(8192),.WDATA_WIDTH(8),.RADDR_DEPTH(8192),.RDATA_WIDTH(8),.WADDR_WIDTH(13),.RADDR_WIDTH(13),.REGMODE("noreg"),.RESETMODE("sync"),.ENABLE_ALMOST_FULL_FLAG("TRUE"),.ALMOST_FULL_ASSERTION("static-single"),.ALMOST_FULL_ASSERT_LVL(2049),.ALMOST_FULL_DEASSERT_LVL(2048),.ENABLE_ALMOST_EMPTY_FLAG("TRUE"),.ALMOST_EMPTY_ASSERTION("static-single"),.ALMOST_EMPTY_ASSERT_LVL(191),
            .ALMOST_EMPTY_DEASSERT_LVL(192),.ENABLE_DATA_COUNT_WR("FALSE"),.ENABLE_DATA_COUNT_RD("FALSE"),.IMPLEMENTATION("EBR"),.FAMILY("iCE40UP")) lscc_fifo_dc_inst (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .rp_rst_i(rp_rst_i), .wr_en_i(wr_en_i), .rd_en_i(rd_en_i), .wr_data_i(wr_data_i[7:0]), .almost_full_th_i(13'b1111111111111), .almost_full_clr_th_i(13'b1111111111111), .almost_empty_th_i(13'b1111111111111), .almost_empty_clr_th_i(13'b1111111111111), .full_o(full_o), .empty_o(empty_o), .almost_full_o(almost_full_o), .almost_empty_o(almost_empty_o), 
                .wr_data_cnt_o(), .rd_data_cnt_o(), .rd_data_o(rd_data_o[7:0])) ; 
endmodule



// =============================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -----------------------------------------------------------------------------
//   Copyright (c) 2017 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED
// -----------------------------------------------------------------------------
//
//   Permission:
//
//      Lattice SG Pte. Ltd. grants permission to use this code
//      pursuant to the terms of the Lattice Reference Design License Agreement.
//
//
//   Disclaimer:
//
//      This VHDL or Verilog source code is intended as a design reference
//      which illustrates how these types of functions can be implemented.
//      It is the user's responsibility to verify their design for
//      consistency and functionality through the use of formal
//      verification methods.  Lattice provides no warranty
//      regarding the use or functionality of this code.
//
// -----------------------------------------------------------------------------
//
//                  Lattice SG Pte. Ltd.
//                  101 Thomson Road, United Square #07-02
//                  Singapore 307591
//
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                       +65-6631-2000 (Singapore)
//                       +1-503-268-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
// -----------------------------------------------------------------------------
//
// =============================================================================
//                         FILE DETAILS
// Project               : Radiant Software 1.1
// File                  : lscc_fifo_dc.v
// Title                 :
// Dependencies          :
// Description           : Implements a dual clock FIFO.
// =============================================================================
//                        REVISION HISTORY
// Version               : 1.0.0.
// Author(s)             :
// Mod. Date             :
// Changes Made          : Initial release.
// =============================================================================
module smi_fifo_ipgen_lscc_fifo_dc #(parameter IMPLEMENTATION = "EBR", parameter WADDR_DEPTH = 512, parameter WADDR_WIDTH = clog2(WADDR_DEPTH), parameter WDATA_WIDTH = 36, parameter RADDR_DEPTH = 512, parameter RADDR_WIDTH = clog2(RADDR_DEPTH), parameter RDATA_WIDTH = 36, parameter REGMODE = "reg", parameter RESETMODE = "async", parameter ENABLE_ALMOST_FULL_FLAG = "TRUE", parameter ENABLE_ALMOST_EMPTY_FLAG = "TRUE", parameter INIT_FILE = "none", parameter INIT_MODE = "none", parameter INIT_FILE_FORMAT = "binary", parameter ALMOST_FULL_ASSERTION = "static-dual", 
        parameter ALMOST_FULL_ASSERT_LVL = 511, parameter ALMOST_FULL_DEASSERT_LVL = 510, parameter ALMOST_EMPTY_ASSERTION = "static-dual", parameter ALMOST_EMPTY_ASSERT_LVL = 1, parameter ALMOST_EMPTY_DEASSERT_LVL = 2, parameter ENABLE_DATA_COUNT_WR = "FALSE", parameter ENABLE_DATA_COUNT_RD = "FALSE", parameter FAMILY = "common") (
    //--begin_ports--
    //----------------------------
    // Inputs
    //----------------------------
    input wr_clk_i, 
    input rd_clk_i, 
    input [(WDATA_WIDTH - 1):0] wr_data_i, 
    input wr_en_i, 
    input rd_en_i, 
    input rst_i, 
    input rp_rst_i, 
    input [(WADDR_WIDTH - 1):0] almost_full_th_i, 
    input [(WADDR_WIDTH - 1):0] almost_full_clr_th_i, 
    input [(RADDR_WIDTH - 1):0] almost_empty_th_i, 
    input [(RADDR_WIDTH - 1):0] almost_empty_clr_th_i, 
    //----------------------------
    // Outputs
    //----------------------------
    output [(RDATA_WIDTH - 1):0] rd_data_o, 
    output full_o, 
    output empty_o, 
    output almost_full_o, 
    output almost_empty_o, 
    output [WADDR_WIDTH:0] wr_data_cnt_o, 
    output [RADDR_WIDTH:0] rd_data_cnt_o) ;
    //--end_ports--
    //----------------------------
    // Local Parameters
    //----------------------------
    localparam G_WADDR_WIDTH = getGWID((WADDR_WIDTH + 1)) ; 
    localparam G_RADDR_WIDTH = getGWID((RADDR_WIDTH + 1)) ; 
    localparam CMP_WIDTH = ((WADDR_WIDTH >= RADDR_WIDTH) ? (RADDR_WIDTH + 1) : (WADDR_WIDTH + 1)) ; 
    genvar i0, i1 ; 
    generate
        //----------------------------
        // Wire and Registers
        //----------------------------
        // -- Write-Synced Signals --
        reg full_r = 1'b0 ; 
        reg [WADDR_WIDTH:0] wr_addr_r = {(WADDR_WIDTH + 1){1'b0}} ; 
        wire [(WADDR_WIDTH - 1):0] wr_mem_addr_r = wr_addr_r[(WADDR_WIDTH - 1):0] ; 
        wire [WADDR_WIDTH:0] wr_addr_p1_r = (wr_addr_r + 1'b1) ; 
        reg [(G_RADDR_WIDTH - 1):0] rp_sync1_r = {G_RADDR_WIDTH{1'b0}} ; 
        reg [(G_RADDR_WIDTH - 1):0] rp_sync2_r = {G_RADDR_WIDTH{1'b0}} ; 
        wire [(G_WADDR_WIDTH - 1):0] wr_grey_w ; 
        reg [(G_WADDR_WIDTH - 1):0] wr_grey_sync_r = {G_WADDR_WIDTH{1'b0}} ; 
        wire [(G_WADDR_WIDTH - 1):0] wr_grey_rst_w ; 
        wire [RADDR_WIDTH:0] rp_sync_w ; 
        wire [(CMP_WIDTH - 1):0] wr_cmp_wr_w = wr_addr_p1_r[WADDR_WIDTH:((WADDR_WIDTH - CMP_WIDTH) + 1)] ; 
        wire [(CMP_WIDTH - 1):0] rd_cmp_wr_w = rp_sync_w[RADDR_WIDTH:((RADDR_WIDTH - CMP_WIDTH) + 1)] ; 
        wire [(CMP_WIDTH - 2):0] wr_cmp_mem_wr_w = wr_cmp_wr_w[(CMP_WIDTH - 2):0] ; 
        wire [(CMP_WIDTH - 2):0] rd_cmp_mem_wr_w = rd_cmp_wr_w[(CMP_WIDTH - 2):0] ; 
        wire [(CMP_WIDTH - 2):0] wr_cur_mem_wr_w = wr_mem_addr_r[(WADDR_WIDTH - 1):((WADDR_WIDTH - CMP_WIDTH) + 1)] ; 
        wire [WADDR_WIDTH:0] wr_sig_wr_p_w ; 
        wire [WADDR_WIDTH:0] wr_sig_rd_p_w ; 
        wire wr_sig_chk = ((wr_sig_wr_p_w >= wr_sig_rd_p_w) ? 1'b1 : 1'b0) ; 
        wire [WADDR_WIDTH:0] wr_sig_diff0_w = (wr_sig_wr_p_w - wr_sig_rd_p_w) ; 
        wire [WADDR_WIDTH:0] wr_sig_diff1_w = ({1'b1,wr_sig_wr_p_w[(WADDR_WIDTH - 1):0]} - {1'b0,wr_sig_rd_p_w[(WADDR_WIDTH - 1):0]}) ; 
        reg [WADDR_WIDTH:0] wr_addr_nxt_r = {(WADDR_WIDTH + 1){1'b0}} ; 
        reg full_nxt_r = 1'b0 ; 
        reg [WADDR_WIDTH:0] wr_addr_rst_nxt_r = {(WADDR_WIDTH + 1){1'b0}} ; 
        reg full_rst_nxt_r = 1'b0 ; 
        // -- Read-Synced Signals --
        reg empty_r = 1'b1 ; 
        reg [RADDR_WIDTH:0] rd_addr_r = {(RADDR_WIDTH + 1){1'b0}} ; 
        wire [(RADDR_WIDTH - 1):0] rd_mem_addr_r = rd_addr_r[(RADDR_WIDTH - 1):0] ; 
        wire [RADDR_WIDTH:0] rd_addr_p1_r = (rd_addr_r + 1'b1) ; 
        reg [(G_WADDR_WIDTH - 1):0] wp_sync1_r = {G_WADDR_WIDTH{1'b0}} ; 
        reg [(G_WADDR_WIDTH - 1):0] wp_sync2_r = {G_WADDR_WIDTH{1'b0}} ; 
        wire [(G_RADDR_WIDTH - 1):0] rd_grey_w ; 
        reg [(G_RADDR_WIDTH - 1):0] rd_grey_sync_r = {G_RADDR_WIDTH{1'b0}} ; 
        wire [(G_RADDR_WIDTH - 1):0] rd_grey_rst_w ; 
        wire [WADDR_WIDTH:0] wr_sync_w ; 
        wire [(CMP_WIDTH - 1):0] rd_cmp_rd_w = rd_addr_p1_r[RADDR_WIDTH:((RADDR_WIDTH - CMP_WIDTH) + 1)] ; 
        wire [(CMP_WIDTH - 1):0] wr_cmp_rd_w = wr_sync_w[WADDR_WIDTH:((WADDR_WIDTH - CMP_WIDTH) + 1)] ; 
        wire [(CMP_WIDTH - 2):0] wr_cmp_mem_rd_w = wr_cmp_rd_w[(CMP_WIDTH - 2):0] ; 
        wire [(CMP_WIDTH - 2):0] rd_cmp_mem_rd_w = rd_cmp_rd_w[(CMP_WIDTH - 2):0] ; 
        wire [(CMP_WIDTH - 2):0] rd_cur_mem_rd_w = rd_mem_addr_r[(RADDR_WIDTH - 1):((RADDR_WIDTH - CMP_WIDTH) + 1)] ; 
        wire [RADDR_WIDTH:0] rd_sig_wr_p_w ; 
        wire [RADDR_WIDTH:0] rd_sig_rd_p_w ; 
        wire rd_sig_chk = ((rd_sig_wr_p_w >= rd_sig_rd_p_w) ? 1'b1 : 1'b0) ; 
        wire [RADDR_WIDTH:0] rd_sig_diff0_w = (rd_sig_wr_p_w - rd_sig_rd_p_w) ; 
        wire [RADDR_WIDTH:0] rd_sig_diff1_w = ({1'b1,rd_sig_wr_p_w[(RADDR_WIDTH - 1):0]} - {1'b0,rd_sig_rd_p_w[(RADDR_WIDTH - 1):0]}) ; 
        reg [RADDR_WIDTH:0] rd_addr_nxt_r = {(RADDR_WIDTH + 1){1'b0}} ; 
        reg empty_nxt_r = 1'b0 ; 
        reg [RADDR_WIDTH:0] rd_addr_rst_nxt_r = {(RADDR_WIDTH + 1){1'b0}} ; 
        reg empty_rst_nxt_r = 1'b0 ; 
        wire [RADDR_WIDTH:0] full_addr_w ; 
        // -- Top-Level Assignments --
        assign full_o = full_r ; 
        assign empty_o = empty_r ; 
        // -- Global Signals -- 
        wire g_rst_w = (rst_i | rp_rst_i) ; 
        wire wr_fifo_en_w = (wr_en_i & (~full_r)) ; 
        wire rd_fifo_en_w = (rd_en_i & (~empty_r)) ; 
        //----------------------------
        // Behavioral Model
        //----------------------------
        // ----------------------
        // -- WRITE CONTROLLER --
        // ----------------------
        // -- wr_grey_encode --
        if ((G_WADDR_WIDTH == (WADDR_WIDTH + 1))) 
            begin : wr_encode_grey_e
                for (i0 = 0;(i0 < (G_WADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] bin_val = wr_addr_nxt_r[(i0 * 4) +: 4] ; 
                    assign wr_grey_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
                for (i0 = 0;(i0 < (G_WADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk2
                    wire [3:0] bin_val = wr_addr_rst_nxt_r[(i0 * 4) +: 4] ; 
                    assign wr_grey_rst_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
            end
        else
            begin : wr_encode_grey_o
                wire [(G_WADDR_WIDTH - 1):0] wr_grey_z_w = {{(G_WADDR_WIDTH - WADDR_WIDTH){1'b0}},wr_addr_nxt_r} ; 
                for (i0 = 0;(i0 < (G_WADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] bin_val = wr_grey_z_w[(i0 * 4) +: 4] ; 
                    assign wr_grey_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
                wire [(G_WADDR_WIDTH - 1):0] wr_grey_z_rst_w = {{(G_WADDR_WIDTH - WADDR_WIDTH){1'b0}},wr_addr_rst_nxt_r} ; 
                for (i0 = 0;(i0 < (G_WADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk2
                    wire [3:0] bin_val = wr_grey_z_rst_w[(i0 * 4) +: 4] ; 
                    assign wr_grey_rst_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
            end
        if ((RESETMODE == "sync")) 
            begin : wr_encode_sync
                always
                    @(posedge wr_clk_i)
                    begin
                        if (g_rst_w) 
                            begin
                                wr_grey_sync_r <=  wr_grey_rst_w ;
                            end
                        else
                            begin
                                wr_grey_sync_r <=  wr_grey_w ;
                            end
                    end
            end
        else
            begin : wr_encode_async
                always
                    @(posedge wr_clk_i or posedge g_rst_w)
                    begin
                        if (g_rst_w) 
                            begin
                                wr_grey_sync_r <=  wr_grey_rst_w ;
                            end
                        else
                            begin
                                wr_grey_sync_r <=  wr_grey_w ;
                            end
                    end
            end
        // -- rd_grey_decode --  
        if ((G_RADDR_WIDTH == (RADDR_WIDTH + 1))) 
            begin : rd_decode_grey_e
                for (i0 = 0;(i0 < (G_RADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] g_val_z_w = rp_sync2_r[(i0 * 4) +: 4] ; 
                    wire [3:0] bin_val ; 
                    assign bin_val[0] = (((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ^ g_val_z_w[0]) ; 
                    assign bin_val[1] = ((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ; 
                    assign bin_val[2] = (g_val_z_w[3] ^ g_val_z_w[2]) ; 
                    assign bin_val[3] = g_val_z_w[3] ; 
                    assign rp_sync_w[(i0 * 4) +: 4] = bin_val ; 
                end
            end
        else
            begin : rd_decode_grey_o
                wire [(G_RADDR_WIDTH - 1):0] rp_sync_grey_w ; 
                for (i0 = 0;(i0 < (G_RADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] g_val_z_w = rp_sync2_r[(i0 * 4) +: 4] ; 
                    wire [3:0] bin_val ; 
                    assign bin_val[0] = (((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ^ g_val_z_w[0]) ; 
                    assign bin_val[1] = ((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ; 
                    assign bin_val[2] = (g_val_z_w[3] ^ g_val_z_w[2]) ; 
                    assign bin_val[3] = g_val_z_w[3] ; 
                    assign rp_sync_grey_w[(i0 * 4) +: 4] = bin_val ; 
                end
                assign rp_sync_w = rp_sync_grey_w[RADDR_WIDTH:0] ; 
            end
        // ---------------------------
        // -- Core Write Controller --
        // ---------------------------
        always
            @(*)
            begin
                wr_addr_rst_nxt_r = ((rst_i == 1'b1) ? {(WADDR_WIDTH + 1){1'b0}} : wr_addr_r) ;
                full_rst_nxt_r = ((rst_i == 1'b1) ? 1'b0 : rp_rst_i) ;
            end
        always
            @(*)
            begin
                wr_addr_nxt_r = wr_addr_r ;
                full_nxt_r = full_r ;
                if (((wr_en_i == 1'b1) && (full_r == 1'b0))) 
                    begin
                        if ((wr_cmp_mem_wr_w == rd_cmp_mem_wr_w)) 
                            begin
                                if ((wr_cmp_wr_w != rd_cmp_wr_w)) 
                                    begin
                                        full_nxt_r = 1'b1 ;
                                    end
                            end
                        wr_addr_nxt_r = wr_addr_p1_r ;
                    end
                else
                    begin
                        if ((wr_cur_mem_wr_w != rd_cmp_mem_wr_w)) 
                            begin
                                full_nxt_r = 1'b0 ;
                            end
                    end
            end
        if ((RESETMODE == "sync")) 
            begin : sync_wr_controller
                always
                    @(posedge wr_clk_i)
                    begin
                        if (g_rst_w) 
                            begin
                                wr_addr_r <=  wr_addr_rst_nxt_r ;
                                full_r <=  full_rst_nxt_r ;
                            end
                        else
                            begin
                                wr_addr_r <=  wr_addr_nxt_r ;
                                full_r <=  full_nxt_r ;
                            end
                    end
            end
        else
            begin : async_wr_controller
                always
                    @(posedge wr_clk_i or posedge g_rst_w)
                    begin
                        if (g_rst_w) 
                            begin
                                wr_addr_r <=  wr_addr_rst_nxt_r ;
                                full_r <=  full_rst_nxt_r ;
                            end
                        else
                            begin
                                wr_addr_r <=  wr_addr_nxt_r ;
                                full_r <=  full_nxt_r ;
                            end
                    end
            end
        // -- Read to Write Synchronizer --
        if ((RESETMODE == "sync")) 
            begin : genblk5
                always
                    @(posedge wr_clk_i)
                    begin
                        if ((rst_i == 1'b1)) 
                            begin
                                rp_sync1_r <=  {G_RADDR_WIDTH{1'b0}} ;
                                rp_sync2_r <=  {G_RADDR_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                rp_sync1_r <=  rd_grey_sync_r ;
                                rp_sync2_r <=  rp_sync1_r ;
                            end
                    end
            end
        else
            begin : genblk5
                always
                    @(posedge wr_clk_i or posedge rst_i)
                    begin
                        if ((rst_i == 1'b1)) 
                            begin
                                rp_sync1_r <=  {G_RADDR_WIDTH{1'b0}} ;
                                rp_sync2_r <=  {G_RADDR_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                rp_sync1_r <=  rd_grey_sync_r ;
                                rp_sync2_r <=  rp_sync1_r ;
                            end
                    end
            end
        // -- Routing for WR difference signals --
        if ((WADDR_WIDTH > RADDR_WIDTH)) 
            begin : genblk6
                assign wr_sig_wr_p_w = wr_addr_r ; 
                assign wr_sig_rd_p_w = {rp_sync_w,{(WADDR_WIDTH - RADDR_WIDTH){1'b0}}} ; 
            end
        else
            begin : genblk6
                assign wr_sig_wr_p_w = wr_addr_r ; 
                assign wr_sig_rd_p_w = rp_sync_w[RADDR_WIDTH:(RADDR_WIDTH - WADDR_WIDTH)] ; 
            end
        // -- Almost Full Flag Controller --
        if ((ENABLE_ALMOST_FULL_FLAG == "TRUE")) 
            begin : afull_flag_impl
                wire [(WADDR_WIDTH - 1):0] almost_full_tick_w = (((ALMOST_FULL_ASSERTION == "static-single") || (ALMOST_FULL_ASSERTION == "static-dual")) ? ALMOST_FULL_ASSERT_LVL : almost_full_th_i) ; 
                wire [(WADDR_WIDTH - 1):0] almost_full_tock_w = ((ALMOST_FULL_ASSERTION == "static-single") ? ALMOST_FULL_ASSERT_LVL : ((ALMOST_FULL_ASSERTION == "static-dual") ? ALMOST_FULL_DEASSERT_LVL : ((ALMOST_FULL_ASSERTION == "dynamic-single") ? almost_full_th_i : almost_full_clr_th_i))) ; 
                reg afull_flag_r = 1'b0 ; 
                reg afull_flag_nxt_r = 1'b0 ; 
                reg afull_flag_rst_r = 1'b0 ; 
                assign almost_full_o = afull_flag_r ; 
                always
                    @(*)
                    begin
                        afull_flag_rst_r = ((~rst_i) & rp_rst_i) ;
                    end
                always
                    @(*)
                    begin
                        afull_flag_nxt_r = afull_flag_r ;
                        if ((wr_sig_chk == 1'b1)) 
                            begin
                                if ((wr_sig_diff0_w >= (almost_full_tick_w - wr_en_i))) 
                                    begin
                                        afull_flag_nxt_r = 1'b1 ;
                                    end
                                else
                                    if ((wr_sig_diff0_w <= almost_full_tock_w)) 
                                        begin
                                            afull_flag_nxt_r = 1'b0 ;
                                        end
                            end
                        else
                            begin
                                if ((wr_sig_diff1_w >= (almost_full_tick_w - wr_en_i))) 
                                    begin
                                        afull_flag_nxt_r = 1'b1 ;
                                    end
                                else
                                    if ((wr_sig_diff1_w <= almost_full_tock_w)) 
                                        begin
                                            afull_flag_nxt_r = 1'b0 ;
                                        end
                            end
                    end
                if ((RESETMODE == "sync")) 
                    begin : sync
                        always
                            @(posedge wr_clk_i)
                            begin
                                if ((g_rst_w == 1'b1)) 
                                    begin
                                        afull_flag_r <=  afull_flag_rst_r ;
                                    end
                                else
                                    begin
                                        afull_flag_r <=  afull_flag_nxt_r ;
                                    end
                            end
                    end
                else
                    begin : async
                        always
                            @(posedge wr_clk_i or posedge g_rst_w)
                            begin
                                if ((g_rst_w == 1'b1)) 
                                    begin
                                        afull_flag_r <=  afull_flag_rst_r ;
                                    end
                                else
                                    begin
                                        afull_flag_r <=  afull_flag_nxt_r ;
                                    end
                            end
                    end
            end
        else
            begin : genblk7
                assign almost_full_o = 1'b0 ; 
            end
        // -- Enable WR Data Count Controller --
        if ((ENABLE_DATA_COUNT_WR == "TRUE")) 
            begin : en_wr_cnt
                reg [WADDR_WIDTH:0] wr_counter_r = {(WADDR_WIDTH + 1){1'b0}} ; 
                assign wr_data_cnt_o = wr_counter_r ; 
                always
                    @(posedge wr_clk_i)
                    begin
                        if ((wr_sig_chk == 1'b1)) 
                            begin
                                wr_counter_r <=  wr_sig_diff0_w ;
                            end
                        else
                            begin
                                wr_counter_r <=  wr_sig_diff1_w ;
                            end
                    end
            end
        else
            begin : genblk8
                assign wr_data_cnt_o = {(WADDR_WIDTH + 1){1'b0}} ; 
            end
        // ---------------------
        // -- READ CONTROLLER --
        // ---------------------
        // -- Full Address for rp_rst_i --
        if ((WADDR_WIDTH >= RADDR_WIDTH)) 
            begin : full_addr_e
                assign full_addr_w = {(~wr_sync_w[WADDR_WIDTH]),wr_sync_w[(WADDR_WIDTH - 1):(WADDR_WIDTH - RADDR_WIDTH)]} ; 
            end
        else
            begin : full_addr_o
                assign full_addr_w = {(~wr_sync_w[WADDR_WIDTH]),wr_sync_w[(WADDR_WIDTH - 1):0],{(RADDR_WIDTH - WADDR_WIDTH){1'b0}}} ; 
            end
        // -- rd_grey_encode --
        if ((G_RADDR_WIDTH == RADDR_WIDTH)) 
            begin : rd_encode_grey_e
                for (i0 = 0;(i0 < (G_RADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] bin_val = rd_addr_nxt_r[(i0 * 4) +: 4] ; 
                    assign rd_grey_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
                for (i0 = 0;(i0 < (G_RADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk2
                    wire [3:0] bin_val = rd_addr_rst_nxt_r[(i0 * 4) +: 4] ; 
                    assign rd_grey_rst_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
            end
        else
            begin : rd_encode_grey_o
                wire [(G_RADDR_WIDTH - 1):0] rd_grey_z_w = {{(G_RADDR_WIDTH - RADDR_WIDTH){1'b0}},rd_addr_nxt_r} ; 
                for (i0 = 0;(i0 < (G_RADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] bin_val = rd_grey_z_w[(i0 * 4) +: 4] ; 
                    assign rd_grey_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
                wire [(G_RADDR_WIDTH - 1):0] rd_grey_rst_z_w = {{(G_RADDR_WIDTH - RADDR_WIDTH){1'b0}},rd_addr_rst_nxt_r} ; 
                for (i0 = 0;(i0 < (G_RADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk2
                    wire [3:0] bin_val = rd_grey_rst_z_w[(i0 * 4) +: 4] ; 
                    assign rd_grey_rst_w[(i0 * 4) +: 4] = ((bin_val >> 1) ^ bin_val) ; 
                end
            end
        if ((RESETMODE == "sync")) 
            begin : rd_encode_sync
                always
                    @(posedge rd_clk_i)
                    begin
                        if (g_rst_w) 
                            begin
                                rd_grey_sync_r <=  rd_grey_rst_w ;
                            end
                        else
                            begin
                                rd_grey_sync_r <=  rd_grey_w ;
                            end
                    end
            end
        else
            begin : rd_encode_async
                always
                    @(posedge rd_clk_i or posedge g_rst_w)
                    begin
                        if (g_rst_w) 
                            begin
                                rd_grey_sync_r <=  rd_grey_rst_w ;
                            end
                        else
                            begin
                                rd_grey_sync_r <=  rd_grey_w ;
                            end
                    end
            end
        // -- wr_grey_decode --
        if ((G_WADDR_WIDTH == WADDR_WIDTH)) 
            begin : wr_decode_grey_e
                for (i0 = 0;(i0 < (G_WADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] g_val_z_w = wp_sync2_r[(i0 * 4) +: 4] ; 
                    wire [3:0] bin_val ; 
                    assign bin_val[0] = (((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ^ g_val_z_w[0]) ; 
                    assign bin_val[1] = ((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ; 
                    assign bin_val[2] = (g_val_z_w[3] ^ g_val_z_w[2]) ; 
                    assign bin_val[3] = g_val_z_w[3] ; 
                    assign wr_sync_w[(i0 * 4) +: 4] = bin_val ; 
                end
            end
        else
            begin : wr_decode_grey_o
                wire [(G_WADDR_WIDTH - 1):0] wr_sync_grey_w ; 
                for (i0 = 0;(i0 < (G_WADDR_WIDTH / 4));i0 = (i0 + 1))
                begin : genblk1
                    wire [3:0] g_val_z_w = wp_sync2_r[(i0 * 4) +: 4] ; 
                    wire [3:0] bin_val ; 
                    assign bin_val[0] = (((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ^ g_val_z_w[0]) ; 
                    assign bin_val[1] = ((g_val_z_w[3] ^ g_val_z_w[2]) ^ g_val_z_w[1]) ; 
                    assign bin_val[2] = (g_val_z_w[3] ^ g_val_z_w[2]) ; 
                    assign bin_val[3] = g_val_z_w[3] ; 
                    assign wr_sync_grey_w[(i0 * 4) +: 4] = bin_val ; 
                end
                assign wr_sync_w = wr_sync_grey_w[WADDR_WIDTH:0] ; 
            end
        // ---------------------------
        // -- Core Read Controller --
        // ---------------------------
        always
            @(*)
            begin
                rd_addr_rst_nxt_r = ((rst_i == 1'b1) ? {(RADDR_WIDTH + 1){1'b0}} : full_addr_w) ;
                empty_rst_nxt_r = rst_i ;
            end
        always
            @(*)
            begin
                rd_addr_nxt_r = rd_addr_r ;
                empty_nxt_r = empty_r ;
                if (((rd_en_i == 1'b1) && (empty_r == 1'b0))) 
                    begin
                        if ((wr_cmp_mem_rd_w == rd_cmp_mem_rd_w)) 
                            begin
                                if ((wr_cmp_rd_w == rd_cmp_rd_w)) 
                                    begin
                                        empty_nxt_r = 1'b1 ;
                                    end
                            end
                        rd_addr_nxt_r = rd_addr_p1_r ;
                    end
                else
                    begin
                        if ((rd_cur_mem_rd_w != wr_cmp_mem_rd_w)) 
                            begin
                                empty_nxt_r = 1'b0 ;
                            end
                    end
            end
        if ((RESETMODE == "sync")) 
            begin : sync_rd_controller
                always
                    @(posedge rd_clk_i)
                    begin
                        if (g_rst_w) 
                            begin
                                empty_r <=  empty_rst_nxt_r ;
                                rd_addr_r <=  rd_addr_rst_nxt_r ;
                            end
                        else
                            begin
                                empty_r <=  empty_nxt_r ;
                                rd_addr_r <=  rd_addr_nxt_r ;
                            end
                    end
            end
        else
            begin : async_rd_controller
                always
                    @(posedge rd_clk_i or posedge g_rst_w)
                    begin
                        if (g_rst_w) 
                            begin
                                empty_r <=  empty_rst_nxt_r ;
                                rd_addr_r <=  rd_addr_rst_nxt_r ;
                            end
                        else
                            begin
                                empty_r <=  empty_nxt_r ;
                                rd_addr_r <=  rd_addr_nxt_r ;
                            end
                    end
            end
        // -- Write to Read Synchronizer --
        if ((RESETMODE == "sync")) 
            begin : genblk14
                always
                    @(posedge rd_clk_i)
                    begin
                        if ((rst_i == 1'b1)) 
                            begin
                                wp_sync1_r <=  {G_WADDR_WIDTH{1'b0}} ;
                                wp_sync2_r <=  {G_WADDR_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                wp_sync1_r <=  wr_grey_sync_r ;
                                wp_sync2_r <=  wp_sync1_r ;
                            end
                    end
            end
        else
            begin : genblk14
                always
                    @(posedge rd_clk_i or posedge rst_i)
                    begin
                        if ((rst_i == 1'b1)) 
                            begin
                                wp_sync1_r <=  {G_WADDR_WIDTH{1'b0}} ;
                                wp_sync2_r <=  {G_WADDR_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                wp_sync1_r <=  wr_grey_sync_r ;
                                wp_sync2_r <=  wp_sync1_r ;
                            end
                    end
            end
        // -- Routing for RD difference signals --
        if ((RADDR_WIDTH > WADDR_WIDTH)) 
            begin : genblk15
                assign rd_sig_wr_p_w = {wr_sync_w,{(RADDR_WIDTH - WADDR_WIDTH){1'b0}}} ; 
                assign rd_sig_rd_p_w = rd_addr_r ; 
            end
        else
            begin : genblk15
                assign rd_sig_wr_p_w = wr_sync_w[WADDR_WIDTH:(WADDR_WIDTH - RADDR_WIDTH)] ; 
                assign rd_sig_rd_p_w = rd_addr_r ; 
            end
        // -- Almost Empty Flag Controller --
        if ((ENABLE_ALMOST_EMPTY_FLAG == "TRUE")) 
            begin : aempty_flag_impl
                wire [(RADDR_WIDTH - 1):0] almost_empty_tick_w = (((ALMOST_EMPTY_ASSERTION == "static-single") || (ALMOST_EMPTY_ASSERTION == "static-dual")) ? ALMOST_EMPTY_ASSERT_LVL : almost_empty_th_i) ; 
                wire [(RADDR_WIDTH - 1):0] almost_empty_tock_w = ((ALMOST_EMPTY_ASSERTION == "static-single") ? ALMOST_EMPTY_ASSERT_LVL : ((ALMOST_EMPTY_ASSERTION == "static-dual") ? ALMOST_EMPTY_DEASSERT_LVL : ((ALMOST_EMPTY_ASSERTION == "dynamic-single") ? almost_empty_th_i : almost_empty_clr_th_i))) ; 
                reg aempty_flag_r = 1'b1 ; 
                reg aempty_flag_nxt_r = 1'b1 ; 
                reg aempty_flag_rst_r = 1'b1 ; 
                assign almost_empty_o = aempty_flag_r ; 
                always
                    @(*)
                    begin
                        aempty_flag_rst_r = rst_i ;
                    end
                always
                    @(*)
                    begin
                        aempty_flag_nxt_r = aempty_flag_r ;
                        if ((rd_sig_chk == 1'b1)) 
                            begin
                                if ((rd_sig_diff0_w <= (almost_empty_tick_w + rd_en_i))) 
                                    begin
                                        aempty_flag_nxt_r = 1'b1 ;
                                    end
                                else
                                    if ((rd_sig_diff0_w >= almost_empty_tock_w)) 
                                        begin
                                            aempty_flag_nxt_r = 1'b0 ;
                                        end
                            end
                        else
                            begin
                                if ((rd_sig_diff1_w <= (almost_empty_tick_w + rd_en_i))) 
                                    begin
                                        aempty_flag_nxt_r = 1'b1 ;
                                    end
                                else
                                    if ((rd_sig_diff1_w >= almost_empty_tock_w)) 
                                        begin
                                            aempty_flag_nxt_r = 1'b0 ;
                                        end
                            end
                    end
                if ((RESETMODE == "sync")) 
                    begin : sync
                        always
                            @(posedge rd_clk_i)
                            begin
                                if ((g_rst_w == 1'b1)) 
                                    begin
                                        aempty_flag_r <=  aempty_flag_rst_r ;
                                    end
                                else
                                    begin
                                        aempty_flag_r <=  aempty_flag_nxt_r ;
                                    end
                            end
                    end
                else
                    begin : async
                        always
                            @(posedge rd_clk_i or posedge g_rst_w)
                            begin
                                if ((g_rst_w == 1'b1)) 
                                    begin
                                        aempty_flag_r <=  aempty_flag_rst_r ;
                                    end
                                else
                                    begin
                                        aempty_flag_r <=  aempty_flag_nxt_r ;
                                    end
                            end
                    end
            end
        else
            begin : genblk16
                assign almost_empty_o = 1'b0 ; 
            end
        // -- Enable RD Data Count Controller --
        if ((ENABLE_DATA_COUNT_RD == "TRUE")) 
            begin : en_rd_cnt
                reg [RADDR_WIDTH:0] rd_counter_r = {(RADDR_WIDTH + 1){1'b0}} ; 
                assign rd_data_cnt_o = rd_counter_r ; 
                always
                    @(posedge rd_clk_i)
                    begin
                        if ((rd_sig_chk == 1'b1)) 
                            begin
                                rd_counter_r <=  rd_sig_diff0_w ;
                            end
                        else
                            begin
                                rd_counter_r <=  rd_sig_diff1_w ;
                            end
                    end
            end
        else
            begin : genblk17
                assign rd_data_cnt_o = {(RADDR_WIDTH + 1){1'b0}} ; 
            end
        wire t_rd_fifo_en_w ; 
        if ((REGMODE == "noreg")) 
            begin : genblk18
                assign t_rd_fifo_en_w = rd_fifo_en_w ; 
            end
        else
            begin : genblk18
                reg rd_prev_r = 1'b0 ; 
                assign t_rd_fifo_en_w = (rd_fifo_en_w | rd_prev_r) ; 
                always
                    @(posedge rd_clk_i)
                    begin
                        rd_prev_r <=  rd_fifo_en_w ;
                    end
            end
        // --------------------------
        // -- FIFO Memory Instance --
        // --------------------------
        if ((IMPLEMENTATION == "EBR")) 
            begin : EBR
                smi_fifo_ipgen_lscc_fifo_mem #(.FAMILY(FAMILY),.WADDR_DEPTH(WADDR_DEPTH),.WADDR_WIDTH(WADDR_WIDTH),.WDATA_WIDTH(WDATA_WIDTH),.RADDR_DEPTH(RADDR_DEPTH),.RADDR_WIDTH(RADDR_WIDTH),.RDATA_WIDTH(RDATA_WIDTH),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESETMODE),.BYTE_ENABLE(0),.BYTE_WIDTH(1)) u_fifo_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(g_rst_w), .wr_clk_en_i(wr_fifo_en_w), .rd_clk_en_i(t_rd_fifo_en_w), .rd_out_clk_en_i(1'b1), .wr_en_i(wr_fifo_en_w), .wr_data_i(wr_data_i), .wr_addr_i(wr_mem_addr_r), .rd_en_i(t_rd_fifo_en_w), .rd_addr_i(rd_mem_addr_r), .ben_i(1'b1), .rd_data_o(rd_data_o)) ; 
            end
        else
            begin : DIST
                (* syn_ramstyle="registers" *) reg [(RDATA_WIDTH - 1):0] mem [((2 ** RADDR_WIDTH) - 1):0] ; 
                reg [(RDATA_WIDTH - 1):0] out_raw ; 
                reg [(RDATA_WIDTH - 1):0] out_buffer ; 
                wire write_enable = wr_fifo_en_w ; 
                wire read_enable = t_rd_fifo_en_w ; 
                assign rd_data_o = ((REGMODE == "noreg") ? out_raw : out_buffer) ; 
                always
                    @(posedge wr_clk_i)
                    begin
                        if ((write_enable == 1'b1)) 
                            begin
                                mem[wr_mem_addr_r] <=  wr_data_i ;
                            end
                    end
                always
                    @(posedge rd_clk_i)
                    begin
                        if ((read_enable == 1'b1)) 
                            begin
                                out_raw <=  mem[rd_mem_addr_r] ;
                            end
                    end
                if ((REGMODE == "reg")) 
                    begin : genblk1
                        if ((RESETMODE == "async")) 
                            begin : async
                                always
                                    @(posedge rd_clk_i or posedge rst_i)
                                    begin
                                        if ((rst_i == 1'b1)) 
                                            begin
                                                out_buffer <=  'h0 ;
                                            end
                                        else
                                            if ((read_enable == 1'b1)) 
                                                begin
                                                    out_buffer <=  out_raw ;
                                                end
                                    end
                            end
                        else
                            begin : sync
                                always
                                    @(posedge rd_clk_i)
                                    begin
                                        if ((rst_i == 1'b1)) 
                                            begin
                                                out_buffer <=  'h0 ;
                                            end
                                        else
                                            if ((read_enable == 1'b1)) 
                                                begin
                                                    out_buffer <=  out_raw ;
                                                end
                                    end
                            end
                    end
            end
    endgenerate
    //------------------------------------------------------------------------------
    // Function Definition
    //------------------------------------------------------------------------------
    function [31:0] getGWID ; 
        input [31:0] wid ; 
        begin
            getGWID = (4 * ((wid / 4) + (wid % 4))) ;
        end
    endfunction
    function [31:0] clog2 ; 
        input [31:0] value ; 
        reg [31:0] num ; 
        begin
            num = (value - 1) ;
            for (clog2 = 0 ; (num > 0) ; clog2 = (clog2 + 1))
                num = (num >> 1) ;
        end
    endfunction
endmodule



// =============================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -----------------------------------------------------------------------------
//   Copyright (c) 2017 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED
// -----------------------------------------------------------------------------
//
//   Permission:
//
//      Lattice SG Pte. Ltd. grants permission to use this code
//      pursuant to the terms of the Lattice Reference Design License Agreement.
//
//
//   Disclaimer:
//
//      This VHDL or Verilog source code is intended as a design reference
//      which illustrates how these types of functions can be implemented.
//      It is the user's responsibility to verify their design for
//      consistency and functionality through the use of formal
//      verification methods.  Lattice provides no warranty
//      regarding the use or functionality of this code.
//
// -----------------------------------------------------------------------------
//
//                  Lattice SG Pte. Ltd.
//                  101 Thomson Road, United Square #07-02
//                  Singapore 307591
//
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                       +65-6631-2000 (Singapore)
//                       +1-503-268-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
// -----------------------------------------------------------------------------
//
// =============================================================================
//                         FILE DETAILS
// Project               : Radiant Software 1.1
// File                  : lscc_fifo_mem.v
// Title                 :
// Dependencies          :
// Description           : Implements a pseudo Dual Port RAM using EBR.
// =============================================================================
//                        REVISION HISTORY
// Version               : 1.1.0.
// Author(s)             :
// Mod. Date             :
// Changes Made          : Initial release.
// =============================================================================
module smi_fifo_ipgen_lscc_fifo_mem #(parameter _FCODE_ICE_ = 2, parameter _FCODE_COMMON_ = 0, parameter FAMILY = "common", parameter FAMILY_CODE = ((FAMILY == "iCE40UP") ? _FCODE_ICE_ : _FCODE_COMMON_), parameter WADDR_DEPTH = 1024, parameter WADDR_WIDTH = clog2(WADDR_DEPTH), parameter WDATA_WIDTH = 16, parameter RADDR_DEPTH = 256, parameter RADDR_WIDTH = clog2(RADDR_DEPTH), parameter RDATA_WIDTH = 64, parameter REGMODE = "reg", parameter GSR = "enable", parameter RESETMODE = "sync", parameter RESET_RELEASE = "sync", parameter INIT_FILE = "none", 
        parameter INIT_FILE_FORMAT = "binary", parameter MODULE_TYPE = "ram_dp", parameter INIT_MODE = "none", parameter BYTE_ENABLE = 1, parameter BYTE_SIZE = ((BYTE_ENABLE == 1) ? getByteSize(WDATA_WIDTH) : WDATA_WIDTH), parameter BYTE_WIDTH = (WDATA_WIDTH / BYTE_SIZE), parameter PIPELINES = 0, parameter ECC_ENABLE = "", parameter INIT_VALUE_00 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_01 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_02 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_03 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_04 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_05 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_06 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_07 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_08 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_09 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0F = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_10 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_11 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_12 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_13 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_14 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_15 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_16 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_17 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_18 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_19 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1F = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_20 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_21 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_22 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_23 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_24 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_25 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_26 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_27 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_28 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_29 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2F = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_30 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_31 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_32 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_33 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_34 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_35 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_36 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_37 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_38 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_39 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3F = "0x0000000000000000000000000000000000000000000000000000000000000000") (
    // -----------------------------------------------------------------------------
    // Input/Output Ports
    // -----------------------------------------------------------------------------
    input wr_clk_i, 
    input rd_clk_i, 
    input rst_i, 
    input wr_clk_en_i, 
    input rd_clk_en_i, 
    input rd_out_clk_en_i, 
    input wr_en_i, 
    input [(WDATA_WIDTH - 1):0] wr_data_i, 
    input [(WADDR_WIDTH - 1):0] wr_addr_i, 
    input rd_en_i, 
    input [(RADDR_WIDTH - 1):0] rd_addr_i, 
    input [(BYTE_WIDTH - 1):0] ben_i, 
    output [(RDATA_WIDTH - 1):0] rd_data_o) ;
    // -----------------------------------------------------------------------------
    // Local Parameters
    // -----------------------------------------------------------------------------
    localparam IS_BYTE_ENABLE = (((BYTE_ENABLE == 1) && ((WDATA_WIDTH % BYTE_SIZE) == 0)) && (BYTE_WIDTH > 1)) ; 
    localparam IS_GSR_EN = ((GSR == "enable") ? "ENABLED" : "DISABLED") ; 
    localparam IS_ECC = (((ECC_ENABLE == "enable") || (ECC_ENABLE == "ENABLE")) ? "ENABLE" : "DISABLE") ; 
    localparam STRING_LENGTH = 66 ; 
    // -----------------------------------------------------------------------------
    // Generate Sequential Blocks
    // -----------------------------------------------------------------------------
    genvar i0, i1, i_0, i_1 ; 
    generate
        if ((FAMILY == "common")) 
            begin : genblk1
                reg [(RDATA_WIDTH - 1):0] dataout_reg ; 
                reg [(RDATA_WIDTH - 1):0] dataout_reg_buffer ; 
                reg [(RDATA_WIDTH - 1):0] mem /* sythesis syn_ramstyle="rw_check" */ [((2 ** RADDR_WIDTH) - 1):0] ; 
                assign rd_data_o = ((REGMODE == "reg") ? dataout_reg : dataout_reg_buffer) ; 
                initial
                    begin
                        if (((INIT_MODE == "mem_file") && (INIT_FILE != "none"))) 
                            begin
                                if ((INIT_FILE_FORMAT == "hex")) 
                                    $readmemh (INIT_FILE,mem,0,(RADDR_DEPTH - 1)) ;
                                else
                                    $readmemb (INIT_FILE,mem,0,(RADDR_DEPTH - 1)) ;
                            end
                    end
                always
                    @(posedge wr_clk_i)
                    begin
                        if (((wr_clk_en_i == 1'b1) && (wr_en_i == 1'b1))) 
                            mem[wr_addr_i] <=  wr_data_i ;
                    end
                always
                    @(posedge rd_clk_i)
                    begin
                        if (((rd_clk_en_i == 1'b1) && (rd_en_i == 1'b1))) 
                            dataout_reg_buffer <=  mem[rd_addr_i] ;
                    end
                if ((REGMODE == "reg")) 
                    begin : genblk1
                        if ((RESETMODE == "sync")) 
                            begin : genblk1
                                always
                                    @(posedge rd_clk_i)
                                    begin
                                        if ((rst_i == 1'b1)) 
                                            dataout_reg <=  'h0 ;
                                        else
                                            if (((rd_out_clk_en_i == 1'b1) && (rd_en_i == 1'b1))) 
                                                dataout_reg <=  dataout_reg_buffer ;
                                    end
                            end
                        else
                            begin : genblk1
                                always
                                    @(posedge rd_clk_i or posedge rst_i)
                                    begin
                                        if ((rst_i == 1'b1)) 
                                            dataout_reg <=  'h0 ;
                                        else
                                            if (((rd_out_clk_en_i == 1'b1) && (rd_en_i == 1'b1))) 
                                                dataout_reg <=  dataout_reg_buffer ;
                                    end
                            end
                    end
            end
        else
            if (((RDATA_WIDTH == WDATA_WIDTH) && (RADDR_DEPTH == WADDR_DEPTH))) 
                begin : NON_MIX
                    localparam OPT_DATA_WIDTH = getMinimaData(RADDR_DEPTH,RDATA_WIDTH,IS_BYTE_ENABLE,BYTE_SIZE) ; 
                    localparam OPT_ADDR_DEPTH = data_to_addr(OPT_DATA_WIDTH) ; 
                    localparam OPT_ADDR_WIDTH = clog2(OPT_ADDR_DEPTH) ; 
                    localparam EBR_DATA = roundUP(RDATA_WIDTH,OPT_DATA_WIDTH) ; 
                    localparam EBR_ADDR = roundUP(RADDR_DEPTH,OPT_ADDR_DEPTH) ; 
                    localparam INDIVIDUAL_BYTE_ENABLE_IMPL = (((OPT_DATA_WIDTH == 36) | (OPT_DATA_WIDTH == 32)) ? 4 : (((OPT_DATA_WIDTH == 18) | (OPT_DATA_WIDTH == 16)) ? 2 : 1)) ; 
                    wire [(RDATA_WIDTH - 1):0] rd_data_raw_w [(EBR_ADDR - 1):0] ; 
                    for (i0 = 0;(i0 < EBR_ADDR);i0 = (i0 + 1))
                    begin : ADDR_ROUTE
                        wire [(RDATA_WIDTH - 1):0] raw_output_w ; 
                        assign rd_data_raw_w[i0] = raw_output_w ; 
                        wire chk_addr_r_w ; 
                        if ((EBR_ADDR > 1)) 
                            begin : genblk1
                                assign chk_addr_r_w = (rd_addr_i[(RADDR_WIDTH - 1):OPT_ADDR_WIDTH] == i0) ; 
                            end
                        else
                            begin : genblk1
                                assign chk_addr_r_w = 1'b1 ; 
                            end
                        wire [(OPT_ADDR_WIDTH - 1):0] act_addr_r_w ; 
                        if ((OPT_ADDR_WIDTH > RADDR_WIDTH)) 
                            begin : genblk2
                                assign act_addr_r_w[(RADDR_WIDTH - 1):0] = rd_addr_i ; 
                                assign act_addr_r_w[(OPT_ADDR_WIDTH - 1):RADDR_WIDTH] = 'h000 ; 
                            end
                        else
                            begin : genblk2
                                assign act_addr_r_w = rd_addr_i[(OPT_ADDR_WIDTH - 1):0] ; 
                            end
                        wire chk_addr_w_w ; 
                        if ((EBR_ADDR > 1)) 
                            begin : genblk3
                                assign chk_addr_w_w = (wr_addr_i[(WADDR_WIDTH - 1):OPT_ADDR_WIDTH] == i0) ; 
                            end
                        else
                            begin : genblk3
                                assign chk_addr_w_w = 1'b1 ; 
                            end
                        wire [(OPT_ADDR_WIDTH - 1):0] act_addr_w_w ; 
                        if ((OPT_ADDR_WIDTH > WADDR_WIDTH)) 
                            begin : genblk4
                                assign act_addr_w_w[(WADDR_WIDTH - 1):0] = wr_addr_i ; 
                                assign act_addr_w_w[(OPT_ADDR_WIDTH - 1):WADDR_WIDTH] = 'h000 ; 
                            end
                        else
                            begin : genblk4
                                assign act_addr_w_w = wr_addr_i[(OPT_ADDR_WIDTH - 1):0] ; 
                            end
                        for (i1 = 0;(i1 < EBR_DATA);i1 = (i1 + 1))
                        begin : DATA_ROUTE
                            wire [(OPT_DATA_WIDTH - 1):0] act_in_w ; 
                            wire [(OPT_DATA_WIDTH - 1):0] act_out_w ; 
                            if (((OPT_DATA_WIDTH * (i1 + 1)) <= RDATA_WIDTH)) 
                                begin : genblk1
                                    assign act_in_w = wr_data_i[(((i1 + 1) * OPT_DATA_WIDTH) - 1):(i1 * OPT_DATA_WIDTH)] ; 
                                    assign raw_output_w[(((i1 + 1) * OPT_DATA_WIDTH) - 1):(i1 * OPT_DATA_WIDTH)] = act_out_w ; 
                                end
                            else
                                begin : genblk1
                                    assign act_in_w[(WDATA_WIDTH - (1 + (i1 * OPT_DATA_WIDTH))):0] = wr_data_i[(WDATA_WIDTH - 1):(i1 * OPT_DATA_WIDTH)] ; 
                                    assign raw_output_w[(RDATA_WIDTH - 1):(i1 * OPT_DATA_WIDTH)] = act_out_w[(RDATA_WIDTH - (1 + (i1 * OPT_DATA_WIDTH))):0] ; 
                                end
                            wire [(INDIVIDUAL_BYTE_ENABLE_IMPL - 1):0] act_ben_w ; 
                            if ((IS_BYTE_ENABLE == 0)) 
                                begin : genblk2
                                    assign act_ben_w = {INDIVIDUAL_BYTE_ENABLE_IMPL{1'b1}} ; 
                                end
                            else
                                if ((INDIVIDUAL_BYTE_ENABLE_IMPL > 1)) 
                                    begin : genblk2
                                        if ((((i1 + 1) * INDIVIDUAL_BYTE_ENABLE_IMPL) <= BYTE_WIDTH)) 
                                            begin : genblk1
                                                assign act_ben_w = ben_i[(((i1 + 1) * INDIVIDUAL_BYTE_ENABLE_IMPL) - 1):(i1 * INDIVIDUAL_BYTE_ENABLE_IMPL)] ; 
                                            end
                                        else
                                            begin : genblk1
                                                assign act_ben_w[(INDIVIDUAL_BYTE_ENABLE_IMPL - 1):(BYTE_WIDTH - (i1 * INDIVIDUAL_BYTE_ENABLE_IMPL))] = 'hf ; 
                                                assign act_ben_w[(BYTE_WIDTH - (1 + (i1 * INDIVIDUAL_BYTE_ENABLE_IMPL))):0] = ben_i[(BYTE_WIDTH - 1):(i1 * INDIVIDUAL_BYTE_ENABLE_IMPL)] ; 
                                            end
                                    end
                                else
                                    begin : genblk2
                                        assign act_ben_w = ben_i[i1] ; 
                                    end
                            wire f_wr_en_w = (chk_addr_w_w & wr_en_i) ; 
                            wire f_rd_en_w = (chk_addr_r_w & rd_en_i) ; 
                            wire ff_rd_en_w ; 
                            if ((REGMODE == "noreg")) 
                                begin : genblk3
                                    assign ff_rd_en_w = f_rd_en_w ; 
                                end
                            else
                                begin : genblk3
                                    reg f_rd_en_r = 1'b0 ; 
                                    assign ff_rd_en_w = (f_rd_en_w | f_rd_en_r) ; 
                                    always
                                        @(posedge rd_clk_i)
                                        begin
                                            f_rd_en_r <=  f_rd_en_w ;
                                        end
                                end
                            if ((INIT_MODE == "mem_file")) 
                                begin : mem_init
                                    smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(OPT_DATA_WIDTH),.DATA_WIDTH_R(OPT_DATA_WIDTH),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.INIT_MODE(INIT_MODE),.BYTE_ENABLE(IS_BYTE_ENABLE),.INIT_VALUE_00(INIT_VALUE_00[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_01(INIT_VALUE_01[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_02(INIT_VALUE_02[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_03(INIT_VALUE_03[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_04(INIT_VALUE_04[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),
                                            .INIT_VALUE_05(INIT_VALUE_05[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_06(INIT_VALUE_06[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_07(INIT_VALUE_07[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_08(INIT_VALUE_08[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_09(INIT_VALUE_09[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0A(INIT_VALUE_0A[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0B(INIT_VALUE_0B[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0C(INIT_VALUE_0C[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0D(INIT_VALUE_0D[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0E(INIT_VALUE_0E[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0F(INIT_VALUE_0F[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)])) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(f_wr_en_w), .wr_data_i(act_in_w), .wr_addr_i(act_addr_w_w), .rd_en_i(ff_rd_en_w), .rd_addr_i(act_addr_r_w), .ben_i(((IS_BYTE_ENABLE == 1) ? 1'b1 : act_ben_w)), .rd_data_o(act_out_w)) ; 
                                end
                            else
                                begin : no_init
                                    smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(OPT_DATA_WIDTH),.DATA_WIDTH_R(OPT_DATA_WIDTH),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.INIT_MODE(INIT_MODE),.BYTE_ENABLE(0)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(f_wr_en_w), .wr_data_i(act_in_w), .wr_addr_i(act_addr_w_w), .rd_en_i(ff_rd_en_w), .rd_addr_i(act_addr_r_w), .ben_i(1'b1), .rd_data_o(act_out_w)) ; 
                                end
                        end
                    end
                    if ((EBR_ADDR == 1)) 
                        begin : genblk2
                            assign rd_data_o = rd_data_raw_w[0] ; 
                        end
                    else
                        begin : genblk2
                            reg [(RDATA_WIDTH - 1):0] rd_out_buff_r ; 
                            reg [(RADDR_WIDTH - 1):0] rd_addr_0_r = {RADDR_WIDTH{1'b0}} ; 
                            if ((REGMODE == "noreg")) 
                                begin : _nreg
                                    always
                                        @(posedge rd_clk_i)
                                        begin
                                            rd_addr_0_r <=  rd_addr_i ;
                                        end
                                end
                            else
                                begin : _reg
                                    reg [(RADDR_WIDTH - 1):0] rd_addr_1_r = {RADDR_WIDTH{1'b0}} ; 
                                    always
                                        @(posedge rd_clk_i)
                                        begin
                                            rd_addr_0_r <=  rd_addr_1_r ;
                                            rd_addr_1_r <=  rd_addr_i ;
                                        end
                                end
                            always
                                @(*)
                                begin
                                    rd_out_buff_r = rd_data_raw_w[rd_addr_0_r[(RADDR_WIDTH - 1):OPT_ADDR_WIDTH]] ;
                                end
                            assign rd_data_o = rd_out_buff_r ; 
                        end
                end
            else
                if ((IS_BYTE_ENABLE == 0)) 
                    begin : MIX_NO_BYTE_EN
                        localparam MAX_DATA = ((WDATA_WIDTH > RDATA_WIDTH) ? WDATA_WIDTH : RDATA_WIDTH) ; 
                        localparam MAX_PORT = ((WDATA_WIDTH > RDATA_WIDTH) ? "W" : "R") ; 
                        localparam MIN_DEPTH = ((MAX_PORT == "W") ? WADDR_DEPTH : RADDR_DEPTH) ; 
                        localparam Q_FACTOR = ((MAX_PORT == "W") ? (WDATA_WIDTH / RDATA_WIDTH) : (RDATA_WIDTH / WDATA_WIDTH)) ; 
                        localparam PROC_MAX_DATA = procData(MAX_DATA) ; 
                        localparam PROC_MIN_DEPTH = (2 ** clog2(MIN_DEPTH)) ; 
                        localparam PROC_MIN_DATA = (PROC_MAX_DATA / Q_FACTOR) ; 
                        localparam PROC_MAX_DEPTH = (PROC_MIN_DEPTH * Q_FACTOR) ; 
                        localparam W_PORT_USE = ((MAX_PORT == "W") ? PROC_MAX_DATA : PROC_MIN_DATA) ; 
                        localparam W_DEPTH_USE = ((MAX_PORT == "W") ? PROC_MIN_DEPTH : PROC_MAX_DEPTH) ; 
                        localparam W_DEPTH_WIDTH_USE = clog2(W_DEPTH_USE) ; 
                        localparam R_PORT_USE = ((MAX_PORT == "R") ? PROC_MAX_DATA : PROC_MIN_DATA) ; 
                        localparam R_DEPTH_USE = ((MAX_PORT == "R") ? PROC_MIN_DEPTH : PROC_MAX_DEPTH) ; 
                        localparam R_DEPTH_WIDTH_USE = clog2(R_DEPTH_USE) ; 
                        localparam W_DATA_WIDTH_IMPL = getCASE1DataImpl(W_DEPTH_USE,W_PORT_USE,R_DEPTH_USE,R_PORT_USE,1'b1,0) ; 
                        localparam W_ADDR_DEPTH_IMPL = data_to_addr(W_DATA_WIDTH_IMPL) ; 
                        localparam W_ADDR_WIDTH_IMPL = clog2(W_ADDR_DEPTH_IMPL) ; 
                        localparam R_DATA_WIDTH_IMPL = getCASE1DataImpl(W_DEPTH_USE,W_PORT_USE,R_DEPTH_USE,R_PORT_USE,1'b0,0) ; 
                        localparam R_ADDR_DEPTH_IMPL = data_to_addr(R_DATA_WIDTH_IMPL) ; 
                        localparam R_ADDR_WIDTH_IMPL = clog2(R_ADDR_DEPTH_IMPL) ; 
                        localparam EBR_ADDR = roundUP(W_DEPTH_USE,W_ADDR_DEPTH_IMPL) ; 
                        localparam EBR_DATA = roundUP(W_PORT_USE,W_DATA_WIDTH_IMPL) ; 
                        wire [(W_DEPTH_WIDTH_USE - 1):0] wr_addr_buff_w ; 
                        wire [(R_DEPTH_WIDTH_USE - 1):0] rd_addr_buff_w ; 
                        if ((W_DEPTH_WIDTH_USE > WADDR_WIDTH)) 
                            begin : genblk1
                                assign wr_addr_buff_w[(W_DEPTH_WIDTH_USE - 1):WADDR_WIDTH] = 'h0000 ; 
                            end
                        assign wr_addr_buff_w[(WADDR_WIDTH - 1):0] = wr_addr_i ; 
                        if ((R_DEPTH_WIDTH_USE > RADDR_WIDTH)) 
                            begin : genblk2
                                assign rd_addr_buff_w[(R_DEPTH_WIDTH_USE - 1):RADDR_WIDTH] = 'h0000 ; 
                            end
                        assign rd_addr_buff_w[(RADDR_WIDTH - 1):0] = rd_addr_i ; 
                        wire [(W_PORT_USE - 1):0] input_buff_w ; 
                        wire [(R_PORT_USE - 1):0] output_buff_w ; 
                        wire [(R_PORT_USE - 1):0] rd_data_raw_w [(EBR_ADDR - 1):0] ; 
                        wire [(W_PORT_USE - 1):0] master_data_in_w ; 
                        wire [(R_PORT_USE - 1):0] master_data_out_w ; 
                        if ((EBR_DATA > 1)) 
                            begin : genblk3
                                if ((W_PORT_USE > R_PORT_USE)) 
                                    begin : genblk1
                                        assign rd_data_o = output_buff_w[(RDATA_WIDTH - 1):0] ; 
                                        assign output_buff_w = master_data_out_w ; 
                                        wire [(R_PORT_USE - 1):0] inp_buff_seg_w [((W_PORT_USE / R_PORT_USE) - 1):0] ; 
                                        for (i_0 = 0;(i_0 < (W_PORT_USE / R_PORT_USE));i_0 = (i_0 + 1))
                                        begin : genblk1
                                            assign inp_buff_seg_w[i_0] = wr_data_i[((RDATA_WIDTH * (i_0 + 1)) - 1):(RDATA_WIDTH * i_0)] ; 
                                        end
                                        for (i_0 = 0;(i_0 < (W_PORT_USE / R_PORT_USE));i_0 = (i_0 + 1))
                                        begin : genblk2
                                            assign input_buff_w[(((i_0 * R_PORT_USE) + R_PORT_USE) - 1):(i_0 * R_PORT_USE)] = inp_buff_seg_w[i_0] ; 
                                        end
                                        wire [(R_DATA_WIDTH_IMPL - 1):0] master_data_ind_w [((W_PORT_USE / R_DATA_WIDTH_IMPL) - 1):0] ; 
                                        for (i_0 = 0;(i_0 < EBR_DATA);i_0 = (i_0 + 1))
                                        begin : genblk3
                                            for (i_1 = 0;(i_1 < (W_PORT_USE / (EBR_DATA * R_DATA_WIDTH_IMPL)));i_1 = (i_1 + 1))
                                            begin : genblk1
                                                assign master_data_ind_w[(((W_PORT_USE / (EBR_DATA * R_DATA_WIDTH_IMPL)) * i_0) + i_1)] = input_buff_w[((((i_0 * R_DATA_WIDTH_IMPL) + ((i_1 * EBR_DATA) * R_DATA_WIDTH_IMPL)) + R_DATA_WIDTH_IMPL) - 1):((i_0 * R_DATA_WIDTH_IMPL) + ((i_1 * EBR_DATA) * R_DATA_WIDTH_IMPL))] ; 
                                            end
                                        end
                                        for (i_0 = 0;(i_0 < (W_PORT_USE / R_DATA_WIDTH_IMPL));i_0 = (i_0 + 1))
                                        begin : genblk4
                                            assign master_data_in_w[(((i_0 * R_DATA_WIDTH_IMPL) + R_DATA_WIDTH_IMPL) - 1):(i_0 * R_DATA_WIDTH_IMPL)] = master_data_ind_w[i_0] ; 
                                        end
                                    end
                                else
                                    begin : genblk1
                                        if ((W_PORT_USE > WDATA_WIDTH)) 
                                            begin : genblk1
                                                assign input_buff_w[(W_PORT_USE - 1):WDATA_WIDTH] = 'h0000 ; 
                                            end
                                        assign input_buff_w[(WDATA_WIDTH - 1):0] = wr_data_i ; 
                                        assign master_data_in_w = input_buff_w ; 
                                        wire [(W_PORT_USE - 1):0] out_buff_seg_w [((R_PORT_USE / W_PORT_USE) - 1):0] ; 
                                        for (i_0 = 0;(i_0 < (R_PORT_USE / W_PORT_USE));i_0 = (i_0 + 1))
                                        begin : genblk2
                                            assign rd_data_o[((WDATA_WIDTH * (i_0 + 1)) - 1):(WDATA_WIDTH * i_0)] = out_buff_seg_w[i_0] ; 
                                        end
                                        for (i_0 = 0;(i_0 < (R_PORT_USE / W_PORT_USE));i_0 = (i_0 + 1))
                                        begin : genblk3
                                            assign out_buff_seg_w[i_0] = output_buff_w[(((i_0 + 1) * W_PORT_USE) - 1):(i_0 * W_PORT_USE)] ; 
                                        end
                                        wire [(W_DATA_WIDTH_IMPL - 1):0] master_data_ind_out_w [((R_PORT_USE / W_DATA_WIDTH_IMPL) - 1):0] ; 
                                        for (i_0 = 0;(i_0 < (R_PORT_USE / W_PORT_USE));i_0 = (i_0 + 1))
                                        begin : genblk4
                                            for (i_1 = 0;(i_1 < EBR_DATA);i_1 = (i_1 + 1))
                                            begin : genblk1
                                                assign master_data_ind_out_w[((i_0 * EBR_DATA) + i_1)] = master_data_out_w[((((i_1 * R_DATA_WIDTH_IMPL) + (i_0 * W_DATA_WIDTH_IMPL)) + W_DATA_WIDTH_IMPL) - 1):((i_1 * R_DATA_WIDTH_IMPL) + (i_0 * W_DATA_WIDTH_IMPL))] ; 
                                            end
                                        end
                                        for (i_0 = 0;(i_0 < (R_PORT_USE / W_DATA_WIDTH_IMPL));i_0 = (i_0 + 1))
                                        begin : genblk5
                                            assign output_buff_w[(((i_0 * W_DATA_WIDTH_IMPL) + W_DATA_WIDTH_IMPL) - 1):(i_0 * W_DATA_WIDTH_IMPL)] = master_data_ind_out_w[i_0] ; 
                                        end
                                    end
                            end
                        else
                            if ((EBR_ADDR > 1)) 
                                begin : genblk3
                                    localparam Q_SRD_x = (R_PORT_USE / W_PORT_USE) ; 
                                    localparam Q_SWR_x = (W_PORT_USE / R_PORT_USE) ; 
                                    if ((R_PORT_USE < W_PORT_USE)) 
                                        begin : genblk1
                                            for (i_0 = 0;(i_0 < Q_SWR_x);i_0 = (i_0 + 1))
                                            begin : genblk1
                                                assign master_data_in_w[(((i_0 * R_PORT_USE) + RDATA_WIDTH) - 1):(i_0 * R_PORT_USE)] = wr_data_i[(((i_0 * RDATA_WIDTH) + RDATA_WIDTH) - 1):(i_0 * RDATA_WIDTH)] ; 
                                                if ((R_PORT_USE != RDATA_WIDTH)) 
                                                    begin : genblk1
                                                        assign master_data_in_w[(((i_0 * R_PORT_USE) + R_PORT_USE) - 1):((i_0 * R_PORT_USE) + RDATA_WIDTH)] = {(R_PORT_USE - RDATA_WIDTH){1'b0}} ; 
                                                    end
                                            end
                                            assign rd_data_o = master_data_out_w[(RDATA_WIDTH - 1):0] ; 
                                        end
                                    else
                                        begin : genblk1
                                            assign master_data_in_w[(WDATA_WIDTH - 1):0] = wr_data_i ; 
                                            for (i_0 = 0;(i_0 < Q_SRD_x);i_0 = (i_0 + 1))
                                            begin : genblk1
                                                assign rd_data_o[(((i_0 * WDATA_WIDTH) + WDATA_WIDTH) - 1):(i_0 * WDATA_WIDTH)] = master_data_out_w[(((i_0 * W_PORT_USE) + WDATA_WIDTH) - 1):(i_0 * W_PORT_USE)] ; 
                                            end
                                        end
                                end
                        if (((EBR_ADDR == 1) && (EBR_DATA == 1))) 
                            begin : SINGLE_IMPL
                                localparam W_SINGULAR_DATA_x = getSingularCase(W_PORT_USE) ; 
                                localparam R_SINGULAR_DATA_x = getSingularCase(R_PORT_USE) ; 
                                localparam W_SINGULAR_ADDR_WIDTH = clog2(data_to_addr(W_SINGULAR_DATA_x)) ; 
                                localparam R_SINGULAR_ADDR_WIDTH = clog2(data_to_addr(R_SINGULAR_DATA_x)) ; 
                                localparam Q_SRD_x = (R_SINGULAR_DATA_x / W_SINGULAR_DATA_x) ; 
                                localparam Q_SWR_x = (W_SINGULAR_DATA_x / R_SINGULAR_DATA_x) ; 
                                wire [(W_SINGULAR_DATA_x - 1):0] single_wire_in_w ; 
                                wire [(R_SINGULAR_DATA_x - 1):0] single_wire_out_w ; 
                                wire [(W_SINGULAR_ADDR_WIDTH - 1):0] single_wr_addr_w ; 
                                wire [(R_SINGULAR_ADDR_WIDTH - 1):0] single_rd_addr_w ; 
                                if ((R_SINGULAR_DATA_x < W_SINGULAR_DATA_x)) 
                                    begin : genblk1
                                        for (i0 = 0;(i0 < Q_SWR_x);i0 = (i0 + 1))
                                        begin : genblk1
                                            assign single_wire_in_w[(((i0 * R_SINGULAR_DATA_x) + RDATA_WIDTH) - 1):(i0 * R_SINGULAR_DATA_x)] = wr_data_i[(((i0 * RDATA_WIDTH) + RDATA_WIDTH) - 1):(i0 * RDATA_WIDTH)] ; 
                                            if ((R_SINGULAR_DATA_x != RDATA_WIDTH)) 
                                                begin : genblk1
                                                    assign single_wire_in_w[(((i0 * R_SINGULAR_DATA_x) + R_SINGULAR_DATA_x) - 1):((i0 * R_SINGULAR_DATA_x) + RDATA_WIDTH)] = {(R_SINGULAR_DATA_x - RDATA_WIDTH){1'b0}} ; 
                                                end
                                        end
                                        assign rd_data_o = single_wire_out_w[(RDATA_WIDTH - 1):0] ; 
                                    end
                                else
                                    begin : genblk1
                                        assign single_wire_in_w[(WDATA_WIDTH - 1):0] = wr_data_i ; 
                                        for (i0 = 0;(i0 < Q_SRD_x);i0 = (i0 + 1))
                                        begin : genblk1
                                            assign rd_data_o[(((i0 * WDATA_WIDTH) + WDATA_WIDTH) - 1):(i0 * WDATA_WIDTH)] = single_wire_out_w[(((i0 * W_SINGULAR_DATA_x) + WDATA_WIDTH) - 1):(i0 * W_SINGULAR_DATA_x)] ; 
                                        end
                                    end
                                if ((W_SINGULAR_ADDR_WIDTH > WADDR_WIDTH)) 
                                    begin : genblk2
                                        assign single_wr_addr_w[(W_SINGULAR_ADDR_WIDTH - 1):WADDR_WIDTH] = 'h0000 ; 
                                    end
                                assign single_wr_addr_w[(WADDR_WIDTH - 1):0] = wr_addr_i ; 
                                if ((R_SINGULAR_ADDR_WIDTH > RADDR_WIDTH)) 
                                    begin : genblk3
                                        assign single_rd_addr_w[(R_SINGULAR_ADDR_WIDTH - 1):RADDR_WIDTH] = 'h0000 ; 
                                    end
                                assign single_rd_addr_w[(RADDR_WIDTH - 1):0] = rd_addr_i ; 
                                if ((INIT_MODE == "mem_file")) 
                                    begin : mem_init
                                        smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_SINGULAR_DATA_x),.DATA_WIDTH_R(R_SINGULAR_DATA_x),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(0),.INIT_MODE(INIT_MODE),.INIT_VALUE_00(INIT_VALUE_00),.INIT_VALUE_01(INIT_VALUE_01),.INIT_VALUE_02(INIT_VALUE_02),.INIT_VALUE_03(INIT_VALUE_03),.INIT_VALUE_04(INIT_VALUE_04),
                                                .INIT_VALUE_05(INIT_VALUE_05),.INIT_VALUE_06(INIT_VALUE_06),.INIT_VALUE_07(INIT_VALUE_07),.INIT_VALUE_08(INIT_VALUE_08),.INIT_VALUE_09(INIT_VALUE_09),.INIT_VALUE_0A(INIT_VALUE_0A),.INIT_VALUE_0B(INIT_VALUE_0B),.INIT_VALUE_0C(INIT_VALUE_0C),.INIT_VALUE_0D(INIT_VALUE_0D),.INIT_VALUE_0E(INIT_VALUE_0E),.INIT_VALUE_0F(INIT_VALUE_0F)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(wr_en_i), .wr_data_i(single_wire_in_w), .wr_addr_i(single_wr_addr_w), .rd_en_i(rd_en_i), .rd_addr_i(single_rd_addr_w), .ben_i(1'b1), .rd_data_o(single_wire_out_w)) ; 
                                    end
                                else
                                    begin : no_init
                                        smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_SINGULAR_DATA_x),.DATA_WIDTH_R(R_SINGULAR_DATA_x),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(0),.INIT_MODE(INIT_MODE)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(wr_en_i), .wr_data_i(single_wire_in_w), .wr_addr_i(single_wr_addr_w), .rd_en_i(rd_en_i), .rd_addr_i(single_rd_addr_w), .ben_i(1'b1), .rd_data_o(single_wire_out_w)) ; 
                                    end
                            end
                        else
                            begin : MULT_IMPL
                                for (i0 = 0;(i0 < EBR_ADDR);i0 = (i0 + 1))
                                begin : ADDR_x
                                    wire [(R_PORT_USE - 1):0] raw_output_w ; 
                                    assign rd_data_raw_w[i0] = raw_output_w ; 
                                    wire chk_addr_wr_w ; 
                                    if ((EBR_ADDR > 1)) 
                                        begin : genblk1
                                            assign chk_addr_wr_w = (wr_addr_i[(WADDR_WIDTH - 1):W_ADDR_WIDTH_IMPL] == i0) ; 
                                        end
                                    else
                                        begin : genblk1
                                            assign chk_addr_wr_w = 1'b1 ; 
                                        end
                                    wire [(W_ADDR_WIDTH_IMPL - 1):0] act_wr_addr_w ; 
                                    if ((W_ADDR_WIDTH_IMPL > WADDR_WIDTH)) 
                                        begin : genblk2
                                            assign act_wr_addr_w[(W_ADDR_WIDTH_IMPL - 1):WADDR_WIDTH] = 'h0000 ; 
                                            assign act_wr_addr_w[(WADDR_WIDTH - 1):0] = wr_addr_i ; 
                                        end
                                    else
                                        begin : genblk2
                                            assign act_wr_addr_w = wr_addr_i[(W_ADDR_WIDTH_IMPL - 1):0] ; 
                                        end
                                    wire chk_addr_rd_w ; 
                                    if ((EBR_ADDR > 1)) 
                                        begin : genblk3
                                            assign chk_addr_rd_w = (rd_addr_i[(RADDR_WIDTH - 1):R_ADDR_WIDTH_IMPL] == i0) ; 
                                        end
                                    else
                                        begin : genblk3
                                            assign chk_addr_rd_w = 1'b1 ; 
                                        end
                                    wire [(R_ADDR_WIDTH_IMPL - 1):0] act_rd_addr_w ; 
                                    if ((R_ADDR_WIDTH_IMPL > RADDR_WIDTH)) 
                                        begin : genblk4
                                            assign act_rd_addr_w[(R_ADDR_WIDTH_IMPL - 1):RADDR_WIDTH] = 'h0000 ; 
                                            assign act_rd_addr_w[(RADDR_WIDTH - 1):0] = rd_addr_i ; 
                                        end
                                    else
                                        begin : genblk4
                                            assign act_rd_addr_w = rd_addr_i[(R_ADDR_WIDTH_IMPL - 1):0] ; 
                                        end
                                    for (i1 = 0;(i1 < EBR_DATA);i1 = (i1 + 1))
                                    begin : DATA_x
                                        wire [(W_DATA_WIDTH_IMPL - 1):0] act_wr_data_w ; 
                                        wire [(R_DATA_WIDTH_IMPL - 1):0] act_rd_data_w ; 
                                        if (((W_DATA_WIDTH_IMPL * (i1 + 1)) <= W_PORT_USE)) 
                                            begin : genblk1
                                                assign act_wr_data_w = master_data_in_w[((W_DATA_WIDTH_IMPL * (i1 + 1)) - 1):(W_DATA_WIDTH_IMPL * i1)] ; 
                                            end
                                        else
                                            begin : genblk1
                                                assign act_wr_data_w[(W_DATA_WIDTH_IMPL - 1):(W_PORT_USE - (i1 * W_DATA_WIDTH_IMPL))] = 'h0000 ; 
                                                assign act_wr_data_w[(W_PORT_USE - (1 + (W_DATA_WIDTH_IMPL * i1))):0] = master_data_in_w[(W_PORT_USE - 1):(W_DATA_WIDTH_IMPL * i1)] ; 
                                            end
                                        if (((R_DATA_WIDTH_IMPL * (i1 + 1)) <= R_PORT_USE)) 
                                            begin : genblk2
                                                assign raw_output_w[((R_DATA_WIDTH_IMPL * (i1 + 1)) - 1):(R_DATA_WIDTH_IMPL * i1)] = act_rd_data_w ; 
                                            end
                                        else
                                            begin : genblk2
                                                assign raw_output_w[(R_PORT_USE - 1):(R_DATA_WIDTH_IMPL * i1)] = act_rd_data_w[(R_PORT_USE - (1 + (R_DATA_WIDTH_IMPL * i1))):0] ; 
                                            end
                                        wire f_wr_en_w = (chk_addr_wr_w & wr_en_i) ; 
                                        wire f_rd_en_w = (chk_addr_rd_w & rd_en_i) ; 
                                        wire ff_rd_en_w ; 
                                        if ((REGMODE == "noreg")) 
                                            begin : genblk3
                                                assign ff_rd_en_w = f_rd_en_w ; 
                                            end
                                        else
                                            begin : genblk3
                                                reg f_rd_en_r = 1'b0 ; 
                                                assign ff_rd_en_w = (f_rd_en_w | f_rd_en_r) ; 
                                                always
                                                    @(posedge rd_clk_i)
                                                    begin
                                                        f_rd_en_r <=  f_rd_en_w ;
                                                    end
                                            end
                                        if ((INIT_MODE == "mem_file")) 
                                            begin : mem_init
                                                smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_DATA_WIDTH_IMPL),.DATA_WIDTH_R(R_DATA_WIDTH_IMPL),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(0),.INIT_MODE(INIT_MODE),.INIT_VALUE_00(INIT_VALUE_00[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_01(INIT_VALUE_01[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_02(INIT_VALUE_02[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_03(INIT_VALUE_03[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_04(INIT_VALUE_04[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),
                                                        .INIT_VALUE_05(INIT_VALUE_05[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_06(INIT_VALUE_06[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_07(INIT_VALUE_07[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_08(INIT_VALUE_08[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_09(INIT_VALUE_09[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0A(INIT_VALUE_0A[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0B(INIT_VALUE_0B[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0C(INIT_VALUE_0C[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0D(INIT_VALUE_0D[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0E(INIT_VALUE_0E[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0F(INIT_VALUE_0F[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)])) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(f_wr_en_w), .wr_data_i(act_wr_data_w), .wr_addr_i(act_wr_addr_w), .rd_en_i(ff_rd_en_w), .rd_addr_i(act_rd_addr_w), .ben_i(1'b1), .rd_data_o(act_rd_data_w)) ; 
                                            end
                                        else
                                            begin : no_init
                                                smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_DATA_WIDTH_IMPL),.DATA_WIDTH_R(R_DATA_WIDTH_IMPL),.INIT_MODE(INIT_MODE),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(0)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(f_wr_en_w), .wr_data_i(act_wr_data_w), .wr_addr_i(act_wr_addr_w), .rd_en_i(ff_rd_en_w), .rd_addr_i(act_rd_addr_w), .ben_i(1'b1), .rd_data_o(act_rd_data_w)) ; 
                                            end
                                    end
                                end
                                if ((EBR_ADDR == 1)) 
                                    begin : genblk2
                                        assign master_data_out_w = rd_data_raw_w[0] ; 
                                    end
                                else
                                    begin : genblk2
                                        reg [(R_PORT_USE - 1):0] rd_out_buff_r ; 
                                        reg [(RADDR_WIDTH - 1):0] rd_addr_0_r = {RADDR_WIDTH{1'b0}} ; 
                                        if ((REGMODE == "noreg")) 
                                            begin : _nreg
                                                always
                                                    @(posedge rd_clk_i)
                                                    begin
                                                        rd_addr_0_r <=  rd_addr_i ;
                                                    end
                                            end
                                        else
                                            begin : _reg
                                                reg [(RADDR_WIDTH - 1):0] rd_addr_1_r = {RADDR_WIDTH{1'b0}} ; 
                                                always
                                                    @(posedge rd_clk_i)
                                                    begin
                                                        rd_addr_0_r <=  rd_addr_1_r ;
                                                        rd_addr_1_r <=  rd_addr_i ;
                                                    end
                                            end
                                        always
                                            @(*)
                                            begin
                                                rd_out_buff_r = rd_data_raw_w[rd_addr_0_r[(RADDR_WIDTH - 1):R_ADDR_WIDTH_IMPL]] ;
                                            end
                                        assign master_data_out_w = rd_out_buff_r ; 
                                    end
                            end
                    end
                else
                    begin : MIX_W_BYTE_EN
                        localparam MAX_DATA = ((RDATA_WIDTH > WDATA_WIDTH) ? RDATA_WIDTH : WDATA_WIDTH) ; 
                        localparam MIN_DATA = ((RDATA_WIDTH > WDATA_WIDTH) ? WDATA_WIDTH : RDATA_WIDTH) ; 
                        if ((is_byte_enable_good(MAX_DATA,MIN_DATA) == 1)) 
                            begin : BYTE_PASS
                                localparam W_DATA_WIDTH_IMPL = getCASE1DataImpl_wBen(WADDR_DEPTH,WDATA_WIDTH,RADDR_DEPTH,RDATA_WIDTH,1) ; 
                                localparam W_ADDR_DEPTH_IMPL = data_to_addr(W_DATA_WIDTH_IMPL) ; 
                                localparam W_ADDR_WIDTH_IMPL = clog2(W_ADDR_DEPTH_IMPL) ; 
                                localparam R_DATA_WIDTH_IMPL = getCASE1DataImpl_wBen(WADDR_DEPTH,WDATA_WIDTH,RADDR_DEPTH,RDATA_WIDTH,0) ; 
                                localparam R_ADDR_DEPTH_IMPL = data_to_addr(R_DATA_WIDTH_IMPL) ; 
                                localparam R_ADDR_WIDTH_IMPL = clog2(R_ADDR_DEPTH_IMPL) ; 
                                localparam EBR_ADDR = roundUP(WADDR_DEPTH,W_ADDR_DEPTH_IMPL) ; 
                                localparam EBR_DATA = roundUP(WDATA_WIDTH,W_DATA_WIDTH_IMPL) ; 
                                localparam TRUE_BYTE_WIDTH = getTrueByteWidth(W_DATA_WIDTH_IMPL) ; 
                                wire [(RDATA_WIDTH - 1):0] rd_data_raw_w [(EBR_ADDR - 1):0] ; 
                                wire [(BYTE_WIDTH - 1):0] byte_en_buffer_w ; 
                                wire [(WDATA_WIDTH - 1):0] master_data_in_w ; 
                                wire [(RDATA_WIDTH - 1):0] master_data_out_w ; 
                                if ((EBR_DATA > 1)) 
                                    begin : WIRE_chk
                                        if ((WDATA_WIDTH > RDATA_WIDTH)) 
                                            begin : W_OVR_R
                                                assign rd_data_o = master_data_out_w ; 
                                                wire [(R_DATA_WIDTH_IMPL - 1):0] master_data_ind_w [((WDATA_WIDTH / R_DATA_WIDTH_IMPL) - 1):0] ; 
                                                for (i_0 = 0;(i_0 < EBR_DATA);i_0 = (i_0 + 1))
                                                begin : genblk1
                                                    for (i_1 = 0;(i_1 < (WDATA_WIDTH / (EBR_DATA * R_DATA_WIDTH_IMPL)));i_1 = (i_1 + 1))
                                                    begin : genblk1
                                                        assign master_data_ind_w[(((WDATA_WIDTH / (EBR_DATA * R_DATA_WIDTH_IMPL)) * i_0) + i_1)] = wr_data_i[((((i_0 * R_DATA_WIDTH_IMPL) + ((i_1 * EBR_DATA) * R_DATA_WIDTH_IMPL)) + R_DATA_WIDTH_IMPL) - 1):((i_0 * R_DATA_WIDTH_IMPL) + ((i_1 * EBR_DATA) * R_DATA_WIDTH_IMPL))] ; 
                                                    end
                                                end
                                                localparam BYTE_EN_BUFF = (TRUE_BYTE_WIDTH / (WDATA_WIDTH / RDATA_WIDTH)) ; 
                                                for (i_0 = 0;(i_0 < (WDATA_WIDTH / (EBR_DATA * R_DATA_WIDTH_IMPL)));i_0 = (i_0 + 1))
                                                begin : genblk2
                                                    for (i_1 = 0;(i_1 < EBR_DATA);i_1 = (i_1 + 1))
                                                    begin : genblk1
                                                        assign byte_en_buffer_w[(((((i_1 * (WDATA_WIDTH / (EBR_DATA * R_DATA_WIDTH_IMPL))) + i_0) * BYTE_EN_BUFF) + BYTE_EN_BUFF) - 1):(((i_1 * (WDATA_WIDTH / (EBR_DATA * R_DATA_WIDTH_IMPL))) + i_0) * BYTE_EN_BUFF)] = ben_i[(((((i_0 * EBR_DATA) + i_1) * BYTE_EN_BUFF) + BYTE_EN_BUFF) - 1):(((i_0 * EBR_DATA) + i_1) * BYTE_EN_BUFF)] ; 
                                                    end
                                                end
                                                for (i_0 = 0;(i_0 < (WDATA_WIDTH / R_DATA_WIDTH_IMPL));i_0 = (i_0 + 1))
                                                begin : genblk3
                                                    assign master_data_in_w[(((i_0 * R_DATA_WIDTH_IMPL) + R_DATA_WIDTH_IMPL) - 1):(i_0 * R_DATA_WIDTH_IMPL)] = master_data_ind_w[i_0] ; 
                                                end
                                            end
                                        else
                                            begin : R_OVR_W
                                                assign master_data_in_w = wr_data_i ; 
                                                assign byte_en_buffer_w = ben_i ; 
                                                wire [(W_DATA_WIDTH_IMPL - 1):0] master_data_ind_out [((RDATA_WIDTH / W_DATA_WIDTH_IMPL) - 1):0] ; 
                                                for (i_0 = 0;(i_0 < (RDATA_WIDTH / WDATA_WIDTH));i_0 = (i_0 + 1))
                                                begin : genblk1
                                                    for (i_1 = 0;(i_1 < EBR_DATA);i_1 = (i_1 + 1))
                                                    begin : genblk1
                                                        assign master_data_ind_out[(i_1 + (i_0 * EBR_DATA))] = master_data_out_w[((((i_0 * W_DATA_WIDTH_IMPL) + (i_1 * R_DATA_WIDTH_IMPL)) + W_DATA_WIDTH_IMPL) - 1):((i_0 * W_DATA_WIDTH_IMPL) + (i_1 * R_DATA_WIDTH_IMPL))] ; 
                                                    end
                                                end
                                                for (i_0 = 0;(i_0 < (RDATA_WIDTH / W_DATA_WIDTH_IMPL));i_0 = (i_0 + 1))
                                                begin : genblk2
                                                    assign rd_data_o[(((i_0 + 1) * W_DATA_WIDTH_IMPL) - 1):(i_0 * W_DATA_WIDTH_IMPL)] = master_data_ind_out[i_0] ; 
                                                end
                                            end
                                    end
                                else
                                    if ((EBR_ADDR > 1)) 
                                        begin : genblk1
                                            assign master_data_in_w[(WDATA_WIDTH - 1):0] = wr_data_i ; 
                                            assign byte_en_buffer_w[(TRUE_BYTE_WIDTH - 1):0] = ben_i ; 
                                            assign rd_data_o = master_data_out_w[(RDATA_WIDTH - 1):0] ; 
                                        end
                                if (((EBR_ADDR == 1) && (EBR_DATA == 1))) 
                                    begin : SINGLE_IMPL
                                        localparam W_SINGULAR_DATA_x = WDATA_WIDTH ; 
                                        localparam W_SINGULAR_ADDR_x = clog2(data_to_addr(W_SINGULAR_DATA_x)) ; 
                                        localparam R_SINGULAR_DATA_x = RDATA_WIDTH ; 
                                        localparam R_SINGULAR_ADDR_x = clog2(data_to_addr(R_SINGULAR_DATA_x)) ; 
                                        wire [(W_SINGULAR_DATA_x - 1):0] single_true_wr_in_w ; 
                                        wire [(R_SINGULAR_DATA_x - 1):0] single_true_rd_out_w ; 
                                        wire [(W_SINGULAR_ADDR_x - 1):0] single_true_wr_addr_w ; 
                                        wire [(R_SINGULAR_ADDR_x - 1):0] single_true_rd_addr_w ; 
                                        assign single_true_wr_in_w[(WDATA_WIDTH - 1):0] = wr_data_i ; 
                                        if ((W_SINGULAR_ADDR_x > WADDR_WIDTH)) 
                                            begin : genblk1
                                                assign single_true_wr_addr_w[(W_SINGULAR_ADDR_x - 1):WADDR_WIDTH] = 'h0000 ; 
                                            end
                                        assign single_true_wr_addr_w[(WADDR_WIDTH - 1):0] = wr_addr_i ; 
                                        assign rd_data_o = single_true_rd_out_w ; 
                                        if ((R_SINGULAR_ADDR_x > RADDR_WIDTH)) 
                                            begin : genblk2
                                                assign single_true_rd_addr_w[(R_SINGULAR_ADDR_x - 1):RADDR_WIDTH] = 'h0000 ; 
                                            end
                                        assign single_true_rd_addr_w[(RADDR_WIDTH - 1):0] = rd_addr_i ; 
                                        if ((INIT_MODE == "mem_file")) 
                                            begin : mem_init
                                                smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_SINGULAR_DATA_x),.DATA_WIDTH_R(R_SINGULAR_DATA_x),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(1),.INIT_MODE(INIT_MODE),.INIT_VALUE_00(INIT_VALUE_00),.INIT_VALUE_01(INIT_VALUE_01),.INIT_VALUE_02(INIT_VALUE_02),.INIT_VALUE_03(INIT_VALUE_03),.INIT_VALUE_04(INIT_VALUE_04),
                                                        .INIT_VALUE_05(INIT_VALUE_05),.INIT_VALUE_06(INIT_VALUE_06),.INIT_VALUE_07(INIT_VALUE_07),.INIT_VALUE_08(INIT_VALUE_08),.INIT_VALUE_09(INIT_VALUE_09),.INIT_VALUE_0A(INIT_VALUE_0A),.INIT_VALUE_0B(INIT_VALUE_0B),.INIT_VALUE_0C(INIT_VALUE_0C),.INIT_VALUE_0D(INIT_VALUE_0D),.INIT_VALUE_0E(INIT_VALUE_0E),.INIT_VALUE_0F(INIT_VALUE_0F)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(wr_en_i), .wr_data_i(single_true_wr_in_w), .wr_addr_i(single_true_wr_addr_w), .rd_en_i(rd_en_i), .rd_addr_i(single_true_rd_addr_w), .ben_i(ben_i), .rd_data_o(single_true_rd_out_w)) ; 
                                            end
                                        else
                                            begin : no_init
                                                smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_SINGULAR_DATA_x),.DATA_WIDTH_R(R_SINGULAR_DATA_x),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(1),.INIT_MODE(INIT_MODE)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(wr_en_i), .wr_data_i(single_true_wr_in_w), .wr_addr_i(single_true_wr_addr_w), .rd_en_i(rd_en_i), .rd_addr_i(single_true_rd_addr_w), .ben_i(ben_i), .rd_data_o(single_true_rd_out_w)) ; 
                                            end
                                    end
                                else
                                    begin : MULT_IMPL
                                        for (i0 = 0;(i0 < EBR_ADDR);i0 = (i0 + 1))
                                        begin : ADDR_x
                                            wire [(RDATA_WIDTH - 1):0] raw_output_w ; 
                                            assign rd_data_raw_w[i0] = raw_output_w ; 
                                            wire chk_addr_wr_w ; 
                                            if ((EBR_ADDR > 1)) 
                                                begin : genblk1
                                                    assign chk_addr_wr_w = (wr_addr_i[(WADDR_WIDTH - 1):W_ADDR_WIDTH_IMPL] == i0) ; 
                                                end
                                            else
                                                begin : genblk1
                                                    assign chk_addr_wr_w = 1'b1 ; 
                                                end
                                            wire [(W_ADDR_WIDTH_IMPL - 1):0] act_wr_addr_w ; 
                                            if ((W_ADDR_WIDTH_IMPL > WADDR_WIDTH)) 
                                                begin : genblk2
                                                    assign act_wr_addr_w[(W_ADDR_WIDTH_IMPL - 1):WADDR_WIDTH] = 'h0000 ; 
                                                    assign act_wr_addr_w[(WADDR_WIDTH - 1):0] = wr_addr_i ; 
                                                end
                                            else
                                                begin : genblk2
                                                    assign act_wr_addr_w = wr_addr_i[(W_ADDR_WIDTH_IMPL - 1):0] ; 
                                                end
                                            wire chk_addr_rd_w ; 
                                            if ((EBR_ADDR > 1)) 
                                                begin : genblk3
                                                    assign chk_addr_rd_w = (rd_addr_i[(RADDR_WIDTH - 1):R_ADDR_WIDTH_IMPL] == i0) ; 
                                                end
                                            else
                                                begin : genblk3
                                                    assign chk_addr_rd_w = 1'b1 ; 
                                                end
                                            wire [(R_ADDR_WIDTH_IMPL - 1):0] act_rd_addr_w ; 
                                            if ((R_ADDR_WIDTH_IMPL > RADDR_WIDTH)) 
                                                begin : genblk4
                                                    assign act_rd_addr_w[(R_ADDR_WIDTH_IMPL - 1):RADDR_WIDTH] = 'h0000 ; 
                                                    assign act_rd_addr_w[(RADDR_WIDTH - 1):0] = rd_addr_i ; 
                                                end
                                            else
                                                begin : genblk4
                                                    assign act_rd_addr_w = rd_addr_i[(R_ADDR_WIDTH_IMPL - 1):0] ; 
                                                end
                                            for (i1 = 0;(i1 < EBR_DATA);i1 = (i1 + 1))
                                            begin : DATA_x
                                                wire [(W_DATA_WIDTH_IMPL - 1):0] act_wr_data_w ; 
                                                wire [(R_DATA_WIDTH_IMPL - 1):0] act_rd_data_w ; 
                                                wire [(TRUE_BYTE_WIDTH - 1):0] act_ben_w ; 
                                                if (((W_DATA_WIDTH_IMPL * (i1 + 1)) <= WDATA_WIDTH)) 
                                                    begin : genblk1
                                                        assign act_wr_data_w = master_data_in_w[((W_DATA_WIDTH_IMPL * (i1 + 1)) - 1):(W_DATA_WIDTH_IMPL * i1)] ; 
                                                    end
                                                else
                                                    begin : genblk1
                                                        assign act_wr_data_w[(W_DATA_WIDTH_IMPL - 1):(WDATA_WIDTH - (i1 * W_DATA_WIDTH_IMPL))] = 'h0000 ; 
                                                        assign act_wr_data_w[(WDATA_WIDTH - (1 + (W_DATA_WIDTH_IMPL * i1))):0] = master_data_in_w[(WDATA_WIDTH - 1):(W_DATA_WIDTH_IMPL * i1)] ; 
                                                    end
                                                if (((R_DATA_WIDTH_IMPL * (i1 + 1)) <= RDATA_WIDTH)) 
                                                    begin : genblk2
                                                        assign raw_output_w[((R_DATA_WIDTH_IMPL * (i1 + 1)) - 1):(R_DATA_WIDTH_IMPL * i1)] = act_rd_data_w ; 
                                                    end
                                                else
                                                    begin : genblk2
                                                        assign raw_output_w[(RDATA_WIDTH - 1):(R_DATA_WIDTH_IMPL * i1)] = act_rd_data_w[(RDATA_WIDTH - (1 + (R_DATA_WIDTH_IMPL * i1))):0] ; 
                                                    end
                                                if ((TRUE_BYTE_WIDTH > 1)) 
                                                    begin : genblk3
                                                        if ((((i1 + 1) * TRUE_BYTE_WIDTH) <= BYTE_WIDTH)) 
                                                            begin : genblk1
                                                                assign act_ben_w = byte_en_buffer_w[(((i1 + 1) * TRUE_BYTE_WIDTH) - 1):(i1 * TRUE_BYTE_WIDTH)] ; 
                                                            end
                                                        else
                                                            begin : genblk1
                                                                assign act_ben_w[(BYTE_WIDTH - (1 + (i1 * TRUE_BYTE_WIDTH))):0] = byte_en_buffer_w[(BYTE_WIDTH - 1):(i1 * TRUE_BYTE_WIDTH)] ; 
                                                                assign act_ben_w[(TRUE_BYTE_WIDTH - 1):(BYTE_WIDTH - (i1 * TRUE_BYTE_WIDTH))] = {(TRUE_BYTE_WIDTH - (BYTE_WIDTH - (i1 * TRUE_BYTE_WIDTH))){1'b1}} ; 
                                                            end
                                                    end
                                                else
                                                    begin : genblk3
                                                        assign act_ben_w[0] = byte_en_buffer_w[i1] ; 
                                                    end
                                                wire f_wr_en_w = (chk_addr_wr_w & wr_en_i) ; 
                                                wire f_rd_en_w = (chk_addr_rd_w & rd_en_i) ; 
                                                wire ff_rd_en_w ; 
                                                if ((REGMODE == "noreg")) 
                                                    begin : genblk4
                                                        assign ff_rd_en_w = f_rd_en_w ; 
                                                    end
                                                else
                                                    begin : genblk4
                                                        reg f_rd_en_r = 1'b0 ; 
                                                        assign ff_rd_en_w = (f_rd_en_w | f_rd_en_r) ; 
                                                        always
                                                            @(posedge rd_clk_i)
                                                            begin
                                                                f_rd_en_r <=  f_rd_en_w ;
                                                            end
                                                    end
                                                if ((INIT_MODE == "mem_file")) 
                                                    begin : mem_init
                                                        smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_DATA_WIDTH_IMPL),.DATA_WIDTH_R(R_DATA_WIDTH_IMPL),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(1),.INIT_MODE(INIT_MODE),.INIT_VALUE_00(INIT_VALUE_00[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_01(INIT_VALUE_01[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_02(INIT_VALUE_02[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_03(INIT_VALUE_03[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_04(INIT_VALUE_04[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),
                                                                .INIT_VALUE_05(INIT_VALUE_05[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_06(INIT_VALUE_06[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_07(INIT_VALUE_07[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_08(INIT_VALUE_08[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_09(INIT_VALUE_09[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0A(INIT_VALUE_0A[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0B(INIT_VALUE_0B[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0C(INIT_VALUE_0C[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0D(INIT_VALUE_0D[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0E(INIT_VALUE_0E[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)]),.INIT_VALUE_0F(INIT_VALUE_0F[((((((i0 * EBR_DATA) + i1) + 1) * STRING_LENGTH) * 8) - 1):((((i0 * EBR_DATA) + i1) * STRING_LENGTH) * 8)])) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(f_wr_en_w), .wr_data_i(act_wr_data_w), .wr_addr_i(act_wr_addr_w), .rd_en_i(ff_rd_en_w), .rd_addr_i(act_rd_addr_w), .ben_i(act_ben_w), .rd_data_o(act_rd_data_w)) ; 
                                                    end
                                                else
                                                    begin : no_init
                                                        smi_fifo_ipgen_lscc_fifo_mem_core #(.FAMILY(FAMILY),._FCODE_ICE_(_FCODE_ICE_),._FCODE_COMMON_(_FCODE_COMMON_),.DATA_WIDTH_W(W_DATA_WIDTH_IMPL),.DATA_WIDTH_R(R_DATA_WIDTH_IMPL),.REGMODE(REGMODE),.RESETMODE(RESETMODE),.RESET_RELEASE(RESET_RELEASE),.BYTE_ENABLE(1),.INIT_MODE(INIT_MODE)) u_mem0 (.wr_clk_i(wr_clk_i), .rd_clk_i(rd_clk_i), .rst_i(rst_i), .wr_clk_en_i(wr_clk_en_i), .rd_clk_en_i(rd_clk_en_i), .rd_out_clk_en_i(rd_out_clk_en_i), .wr_en_i(f_wr_en_w), .wr_data_i(act_wr_data_w), .wr_addr_i(act_wr_addr_w), .rd_en_i(ff_rd_en_w), .rd_addr_i(act_rd_addr_w), .ben_i(act_ben_w), .rd_data_o(act_rd_data_w)) ; 
                                                    end
                                            end
                                        end
                                        if ((EBR_ADDR == 1)) 
                                            begin : genblk2
                                                assign master_data_out_w = rd_data_raw_w[0] ; 
                                            end
                                        else
                                            begin : genblk2
                                                reg [(RDATA_WIDTH - 1):0] rd_out_buff_r ; 
                                                reg [(RADDR_WIDTH - 1):0] rd_addr_0_r = {RADDR_WIDTH{1'b0}} ; 
                                                if ((REGMODE == "noreg")) 
                                                    begin : _nreg
                                                        always
                                                            @(posedge rd_clk_i)
                                                            begin
                                                                rd_addr_0_r <=  rd_addr_i ;
                                                            end
                                                    end
                                                else
                                                    begin : _reg
                                                        reg [(RADDR_WIDTH - 1):0] rd_addr_1_r = {RADDR_WIDTH{1'b0}} ; 
                                                        always
                                                            @(posedge rd_clk_i)
                                                            begin
                                                                rd_addr_0_r <=  rd_addr_1_r ;
                                                                rd_addr_1_r <=  rd_addr_i ;
                                                            end
                                                    end
                                                always
                                                    @(*)
                                                    begin
                                                        rd_out_buff_r = rd_data_raw_w[rd_addr_0_r[(RADDR_WIDTH - 1):R_ADDR_WIDTH_IMPL]] ;
                                                    end
                                                assign master_data_out_w = rd_out_buff_r ; 
                                            end
                                    end
                            end
                    end
    endgenerate
    //------------------------------------------------------------------------------
    // Function Definition
    //------------------------------------------------------------------------------
    function [31:0] getTrueByteWidth ; 
        input [31:0] dwid_in ; 
        begin
            getTrueByteWidth = ((dwid_in == 16) ? 2 : 1) ;
        end
    endfunction
    function [31:0] procData ; 
        input [31:0] TARGET_DATA ; 
        begin
            procData = 1 ;
            while ((procData < TARGET_DATA))
                begin
                    procData = (procData * 2) ;
                end
        end
    endfunction
    function [31:0] getSingularCase ; 
        input [31:0] port_use ; 
        begin
            getSingularCase = (2 ** clog2(port_use)) ;
        end
    endfunction
    function [31:0] getCASE1DataImpl ; 
        input [31:0] wr_addr_depth ; 
        input [31:0] wr_data_width ; 
        input [31:0] rd_addr_depth ; 
        input [31:0] rd_data_width ; 
        input is_taking_write_port ; 
        input is_taking_total_ebr ; 
        reg [5:0] num0, num1 ; 
        reg [31:0] divisor, wr_addr_div, wr_data_div, rd_addr_div, rd_data_div ; 
        reg [31:0] wr_addr_chk, wr_data_chk, rd_addr_chk, rd_data_chk ; 
        reg [31:0] EBR_usage, prod ; 
        begin
            divisor = ((wr_addr_depth > rd_addr_depth) ? (wr_addr_depth / rd_addr_depth) : (rd_addr_depth / wr_addr_depth)) ;
            EBR_usage = 32'hffffffff ;
            getCASE1DataImpl = 0 ;
            for (num0 = 0 ; (num0 < 6) ; num0 = (num0 + 1))
                begin
                    wr_data_div = getDatabase(8,num0) ;
                    wr_addr_div = data_to_addr(wr_data_div) ;
                    wr_addr_chk = roundUP(wr_addr_depth,wr_addr_div) ;
                    wr_data_chk = roundUP(wr_data_width,wr_data_div) ;
                    for (num1 = 0 ; (num1 < 6) ; num1 = (num1 + 1))
                        begin
                            rd_data_div = getDatabase(8,num1) ;
                            rd_addr_div = data_to_addr(rd_data_div) ;
                            rd_addr_chk = roundUP(rd_addr_depth,rd_addr_div) ;
                            rd_data_chk = roundUP(rd_data_width,rd_data_div) ;
                            if (((wr_addr_chk == rd_addr_chk) && (wr_data_chk == rd_data_chk))) 
                                begin
                                    if ((((wr_data_width % wr_data_div) == 0) && ((rd_data_width % rd_data_div) == 0))) 
                                        begin
                                            prod = (wr_addr_chk * wr_data_chk) ;
                                            if ((prod < EBR_usage)) 
                                                begin
                                                    EBR_usage = prod ;
                                                    if ((is_taking_total_ebr == 1'b1)) 
                                                        getCASE1DataImpl = EBR_usage ;
                                                    else
                                                        if ((is_taking_write_port == 1'b1)) 
                                                            getCASE1DataImpl = wr_data_div ;
                                                        else
                                                            getCASE1DataImpl = rd_data_div ;
                                                end
                                        end
                                end
                        end
                end
        end
    endfunction
    function [31:0] getCASE1DataImpl_wBen ; 
        input [31:0] wr_addr_depth ; 
        input [31:0] wr_data_width ; 
        input [31:0] rd_addr_depth ; 
        input [31:0] rd_data_width ; 
        input is_taking_write_port ; 
        reg [31:0] max_width, min_width, byte_size ; 
        reg [31:0] temp_00, temp_01, upper_factor, lower_factor ; 
        reg [31:0] wr_addr_chk, wr_data_chk, rd_addr_chk, rd_data_chk, wr_data_div, rd_data_div ; 
        begin
            max_width = ((wr_data_width > rd_data_width) ? wr_data_width : rd_data_width) ;
            min_width = ((wr_data_width < rd_data_width) ? wr_data_width : rd_data_width) ;
            byte_size = 8 ;
            if ((wr_data_width > rd_data_width)) 
                begin
                    if ((is_taking_write_port == 1)) 
                        getCASE1DataImpl_wBen = 16 ;
                    else
                        getCASE1DataImpl_wBen = 8 ;
                end
            else
                begin
                    if ((is_taking_write_port == 1)) 
                        getCASE1DataImpl_wBen = 8 ;
                    else
                        getCASE1DataImpl_wBen = 16 ;
                end
        end
    endfunction
    function [31:0] getDatabase ; 
        input [31:0] base_count ; 
        input [31:0] index ; 
        begin
            case (index)
            0 : 
                getDatabase = 16 ;
            1 : 
                getDatabase = 8 ;
            2 : 
                getDatabase = 4 ;
            default : 
                getDatabase = 2 ;
            endcase 
        end
    endfunction
    function [31:0] data_to_addr ; 
        input [31:0] data_size ; 
        begin
            case (data_size)
            16 : 
                data_to_addr = 256 ;
            8 : 
                data_to_addr = 512 ;
            4 : 
                data_to_addr = 1024 ;
            2 : 
                data_to_addr = 2048 ;
            endcase 
        end
    endfunction
    function [31:0] addr_to_data ; 
        input [31:0] addr_size ; 
        begin
            case (addr_size)
            256 : 
                addr_to_data = 16 ;
            512 : 
                addr_to_data = 8 ;
            1024 : 
                addr_to_data = 4 ;
            2048 : 
                addr_to_data = 2 ;
            endcase 
        end
    endfunction
    function [31:0] getMinimaData ; 
        input [31:0] depth_impl ; 
        input [31:0] width_impl ; 
        input is_byte_enable ; 
        input [31:0] byte_size ; 
        reg [31:0] temp_00, temp_01, temp_02, temp_03, temp_04, temp_05 ; 
        begin
            temp_00 = EBR_impl(depth_impl,width_impl,256,16) ;
            temp_01 = EBR_impl(depth_impl,width_impl,512,8) ;
            temp_02 = EBR_impl(depth_impl,width_impl,1024,4) ;
            temp_03 = EBR_impl(depth_impl,width_impl,2048,2) ;
            if ((is_byte_enable == 1)) 
                begin
                    if ((temp_00 <= temp_01)) 
                        getMinimaData = 16 ;
                    else
                        getMinimaData = 8 ;
                end
            else
                begin
                    if ((temp_00 <= temp_01)) 
                        begin
                            if ((temp_00 <= temp_02)) 
                                begin
                                    if ((temp_00 <= temp_03)) 
                                        getMinimaData = 16 ;
                                    else
                                        getMinimaData = 2 ;
                                end
                            else
                                begin
                                    if ((temp_02 <= temp_03)) 
                                        getMinimaData = 4 ;
                                    else
                                        getMinimaData = 2 ;
                                end
                        end
                    else
                        begin
                            if ((temp_01 <= temp_02)) 
                                begin
                                    if ((temp_01 <= temp_03)) 
                                        getMinimaData = 8 ;
                                    else
                                        getMinimaData = 2 ;
                                end
                            else
                                begin
                                    if ((temp_02 <= temp_03)) 
                                        getMinimaData = 4 ;
                                    else
                                        getMinimaData = 2 ;
                                end
                        end
                end
        end
    endfunction
    function [31:0] getByteSize ; 
        input [31:0] data_width ; 
        begin
            getByteSize = 8 ;
        end
    endfunction
    function is_byte_enable_good ; 
        input [31:0] max_data ; 
        input [31:0] min_data ; 
        begin
            is_byte_enable_good = ((((max_data / min_data) == 2) && ((max_data % 16) == 0)) ? 1'b1 : 1'b0) ;
        end
    endfunction
    function [31:0] EBR_impl ; 
        input [31:0] DEPTH_IMPL ; 
        input [31:0] WIDTH_IMPL ; 
        input [31:0] ADDR_DEPTH_X ; 
        input [31:0] DATA_WIDTH_X ; 
        begin
            EBR_impl = (roundUP(DEPTH_IMPL,ADDR_DEPTH_X) * roundUP(WIDTH_IMPL,DATA_WIDTH_X)) ;
        end
    endfunction
    function [31:0] roundUP ; 
        input [31:0] dividend ; 
        input [31:0] divisor ; 
        begin
            if ((divisor == 1)) 
                begin
                    roundUP = dividend ;
                end
            else
                if ((divisor == dividend)) 
                    begin
                        roundUP = 1 ;
                    end
                else
                    begin
                        roundUP = ((dividend / divisor) + (((dividend % divisor) == 0) ? 0 : 1)) ;
                    end
        end
    endfunction
    function [31:0] clog2 ; 
        input [31:0] value ; 
        reg [31:0] num ; 
        begin
            num = (value - 1) ;
            for (clog2 = 0 ; (num > 0) ; clog2 = (clog2 + 1))
                num = (num >> 1) ;
        end
    endfunction
endmodule



//=============================================================================
// lscc_fifo_mem.v
// Local Variables:
// verilog-library-directories: ("../../common")
// End:
//=============================================================================
// =============================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -----------------------------------------------------------------------------
//   Copyright (c) 2017 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
// -----------------------------------------------------------------------------
//
//   Permission:
//
//      Lattice SG Pte. Ltd. grants permission to use this code
//      pursuant to the terms of the Lattice Reference Design License Agreement. 
//
//
//   Disclaimer:
//
//      This VHDL or Verilog source code is intended as a design reference
//      which illustrates how these types of functions can be implemented.
//      It is the user's responsibility to verify their design for
//      consistency and functionality through the use of formal
//      verification methods.  Lattice provides no warranty
//      regarding the use or functionality of this code.
//
// -----------------------------------------------------------------------------
//
//                  Lattice SG Pte. Ltd.
//                  101 Thomson Road, United Square #07-02 
//                  Singapore 307591
//
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                       +65-6631-2000 (Singapore)
//                       +1-503-268-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
// -----------------------------------------------------------------------------
//
// =============================================================================
//                         FILE DETAILS         
// Project               : Radiant Software 1.1
// File                  : lscc_fifo_mem_core.v
// Title                 : 
// Dependencies          : 
// Description           : Implements a single pseudo dual port memory instance.
// =============================================================================
//                        REVISION HISTORY
// Version               : 1.0.0.
// Author(s)             : 
// Mod. Date             : 
// Changes Made          : Initial release.
// =============================================================================
module smi_fifo_ipgen_lscc_fifo_mem_core #(parameter _FCODE_ICE_ = 2, parameter _FCODE_COMMON_ = 0, parameter FAMILY = "iCE40UP", parameter FAMILY_CODE = ((FAMILY == "iCE40UP") ? _FCODE_ICE_ : _FCODE_COMMON_), parameter DATA_WIDTH_W = 36, parameter ADDR_WIDTH_W = getAddrWidth(DATA_WIDTH_W), parameter DATA_WIDTH_R = 36, parameter ADDR_WIDTH_R = getAddrWidth(DATA_WIDTH_R), parameter REGMODE = "reg", parameter GSR = "enabled", parameter RESETMODE = "sync", parameter RESET_RELEASE = "sync", parameter INIT_FILE = "none", parameter INIT_FILE_FORMAT = "binary", parameter INIT_MODE = "none", 
        parameter BYTE_ENABLE = 0, parameter BYTE_WIDTH = ((BYTE_ENABLE == 1) ? getByteWidth(DATA_WIDTH_W) : 1), parameter ECC_ENABLE = "disabled", parameter CSDECODE_W = 0, parameter CSDECODE_R = 0, parameter OPTIMIZATION = "speed", parameter INIT_VALUE_00 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_01 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_02 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_03 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_04 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_05 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_06 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_07 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_08 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_09 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_0F = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_10 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_11 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_12 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_13 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_14 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_15 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_16 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_17 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_18 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_19 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_1F = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_20 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_21 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_22 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_23 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_24 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_25 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_26 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_27 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_28 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_29 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_2F = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_30 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_31 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_32 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_33 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_34 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_35 = "0x0000000000000000000000000000000000000000000000000000000000000000", 
        parameter INIT_VALUE_36 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_37 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_38 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_39 = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3A = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3B = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3C = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3D = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3E = "0x0000000000000000000000000000000000000000000000000000000000000000", parameter INIT_VALUE_3F = "0x0000000000000000000000000000000000000000000000000000000000000000") (
    //unused
    // -----------------------------------------------------------------------------
    // Input/Output Ports
    // -----------------------------------------------------------------------------
    input wr_clk_i, 
    input rd_clk_i, 
    input rst_i, 
    input wr_clk_en_i, 
    input rd_clk_en_i, 
    input rd_out_clk_en_i, 
    input wr_en_i, 
    input [(DATA_WIDTH_W - 1):0] wr_data_i, 
    input [(ADDR_WIDTH_W - 1):0] wr_addr_i, 
    input rd_en_i, 
    input [(ADDR_WIDTH_R - 1):0] rd_addr_i, 
    input [(BYTE_WIDTH - 1):0] ben_i, 
    output [(DATA_WIDTH_R - 1):0] rd_data_o) ;
    // -----------------------------------------------------------------------------
    // Local Parameters
    // -----------------------------------------------------------------------------
    // -----------------------------------------------------------------------------
    // Generate Sequential Blocks
    // -----------------------------------------------------------------------------
    genvar i0 ; 
    generate
        if ((FAMILY_CODE == _FCODE_ICE_)) 
            begin : ICE_MEM
                wire [10:0] raddr_w ; 
                wire [10:0] waddr_w ; 
                wire [15:0] wdata_w ; 
                wire [15:0] rdata_w ; 
                wire [15:0] mask_w ; 
                wire [15:0] mask_t_w ; 
                wire [(DATA_WIDTH_R - 1):0] rd_data_w ; 
                for (i0 = 0;(i0 < 16);i0 = (i0 + 1))
                begin : genblk1
                    if ((i0 < 8)) 
                        begin: genblk1
                            assign mask_w[i0] = ((BYTE_ENABLE == 0) ? 1'b0 : ((DATA_WIDTH_W == 16) ? (~ben_i[0]) : 1'b0)) ; 
                        end
                    else
                        begin: genblk1
                            assign mask_w[i0] = ((BYTE_ENABLE == 0) ? 1'b0 : ((DATA_WIDTH_W == 16) ? (~ben_i[1]) : 1'b0)) ; 
                        end
                end
                if ((DATA_WIDTH_R == 16)) 
                    begin : genblk2
                        assign mask_t_w = mask_w ; 
                    end
                else
                    if ((DATA_WIDTH_R == 8)) 
                        begin : genblk2
                            assign mask_t_w[0] = mask_w[0] ; 
                            assign mask_t_w[2] = mask_w[1] ; 
                            assign mask_t_w[4] = mask_w[2] ; 
                            assign mask_t_w[6] = mask_w[3] ; 
                            assign mask_t_w[8] = mask_w[4] ; 
                            assign mask_t_w[10] = mask_w[5] ; 
                            assign mask_t_w[12] = mask_w[6] ; 
                            assign mask_t_w[14] = mask_w[7] ; 
                            assign mask_t_w[1] = mask_w[8] ; 
                            assign mask_t_w[3] = mask_w[9] ; 
                            assign mask_t_w[5] = mask_w[10] ; 
                            assign mask_t_w[7] = mask_w[11] ; 
                            assign mask_t_w[9] = mask_w[12] ; 
                            assign mask_t_w[11] = mask_w[13] ; 
                            assign mask_t_w[13] = mask_w[14] ; 
                            assign mask_t_w[15] = mask_w[15] ; 
                        end
                    else
                        if ((DATA_WIDTH_R == 4)) 
                            begin : genblk2
                                assign mask_t_w[0] = mask_w[0] ; 
                                assign mask_t_w[4] = mask_w[1] ; 
                                assign mask_t_w[8] = mask_w[2] ; 
                                assign mask_t_w[12] = mask_w[3] ; 
                                assign mask_t_w[1] = mask_w[4] ; 
                                assign mask_t_w[5] = mask_w[5] ; 
                                assign mask_t_w[9] = mask_w[6] ; 
                                assign mask_t_w[13] = mask_w[7] ; 
                                assign mask_t_w[2] = mask_w[8] ; 
                                assign mask_t_w[6] = mask_w[9] ; 
                                assign mask_t_w[10] = mask_w[10] ; 
                                assign mask_t_w[14] = mask_w[11] ; 
                                assign mask_t_w[3] = mask_w[12] ; 
                                assign mask_t_w[7] = mask_w[13] ; 
                                assign mask_t_w[11] = mask_w[14] ; 
                                assign mask_t_w[15] = mask_w[15] ; 
                            end
                        else
                            begin : genblk2
                                assign mask_t_w[0] = mask_w[0] ; 
                                assign mask_t_w[8] = mask_w[1] ; 
                                assign mask_t_w[1] = mask_w[2] ; 
                                assign mask_t_w[9] = mask_w[3] ; 
                                assign mask_t_w[2] = mask_w[4] ; 
                                assign mask_t_w[10] = mask_w[5] ; 
                                assign mask_t_w[3] = mask_w[6] ; 
                                assign mask_t_w[11] = mask_w[7] ; 
                                assign mask_t_w[4] = mask_w[8] ; 
                                assign mask_t_w[12] = mask_w[9] ; 
                                assign mask_t_w[5] = mask_w[10] ; 
                                assign mask_t_w[13] = mask_w[11] ; 
                                assign mask_t_w[6] = mask_w[12] ; 
                                assign mask_t_w[14] = mask_w[13] ; 
                                assign mask_t_w[7] = mask_w[14] ; 
                                assign mask_t_w[15] = mask_w[15] ; 
                            end
                if ((ADDR_WIDTH_R < 11)) 
                    begin: genblk3
                        assign raddr_w[10:ADDR_WIDTH_R] = {(11 - ADDR_WIDTH_R){1'b0}} ; 
                    end
                if ((ADDR_WIDTH_W < 11)) 
                    begin: genblk4
                        assign waddr_w[10:ADDR_WIDTH_W] = {(11 - ADDR_WIDTH_W){1'b0}} ; 
                    end
                if (((DATA_WIDTH_W == 16) && (DATA_WIDTH_R == 16))) 
                    begin : genblk5
                        assign wdata_w = wr_data_i ; 
                        assign waddr_w[(ADDR_WIDTH_W - 1):0] = wr_addr_i ; 
                        assign raddr_w[(ADDR_WIDTH_R - 1):0] = rd_addr_i ; 
                        assign rd_data_w = rdata_w ; 
                    end
                else
                    if (((DATA_WIDTH_W == 16) && (DATA_WIDTH_R == 8))) 
                        begin : genblk5
                            assign wdata_w[0] = wr_data_i[0] ; 
                            assign wdata_w[2] = wr_data_i[1] ; 
                            assign wdata_w[4] = wr_data_i[2] ; 
                            assign wdata_w[6] = wr_data_i[3] ; 
                            assign wdata_w[8] = wr_data_i[4] ; 
                            assign wdata_w[10] = wr_data_i[5] ; 
                            assign wdata_w[12] = wr_data_i[6] ; 
                            assign wdata_w[14] = wr_data_i[7] ; 
                            assign wdata_w[1] = wr_data_i[8] ; 
                            assign wdata_w[3] = wr_data_i[9] ; 
                            assign wdata_w[5] = wr_data_i[10] ; 
                            assign wdata_w[7] = wr_data_i[11] ; 
                            assign wdata_w[9] = wr_data_i[12] ; 
                            assign wdata_w[11] = wr_data_i[13] ; 
                            assign wdata_w[13] = wr_data_i[14] ; 
                            assign wdata_w[15] = wr_data_i[15] ; 
                            assign waddr_w[(ADDR_WIDTH_W - 1):0] = wr_addr_i ; 
                            assign raddr_w = {rd_addr_i[0],rd_addr_i[(ADDR_WIDTH_R - 1):1]} ; 
                            assign rd_data_w[7] = rdata_w[14] ; 
                            assign rd_data_w[6] = rdata_w[12] ; 
                            assign rd_data_w[5] = rdata_w[10] ; 
                            assign rd_data_w[4] = rdata_w[8] ; 
                            assign rd_data_w[3] = rdata_w[6] ; 
                            assign rd_data_w[2] = rdata_w[4] ; 
                            assign rd_data_w[1] = rdata_w[2] ; 
                            assign rd_data_w[0] = rdata_w[0] ; 
                        end
                    else
                        if (((DATA_WIDTH_W == 16) && (DATA_WIDTH_R == 4))) 
                            begin : genblk5
                                assign wdata_w[0] = wr_data_i[0] ; 
                                assign wdata_w[4] = wr_data_i[1] ; 
                                assign wdata_w[8] = wr_data_i[2] ; 
                                assign wdata_w[12] = wr_data_i[3] ; 
                                assign wdata_w[1] = wr_data_i[4] ; 
                                assign wdata_w[5] = wr_data_i[5] ; 
                                assign wdata_w[9] = wr_data_i[6] ; 
                                assign wdata_w[13] = wr_data_i[7] ; 
                                assign wdata_w[2] = wr_data_i[8] ; 
                                assign wdata_w[6] = wr_data_i[9] ; 
                                assign wdata_w[10] = wr_data_i[10] ; 
                                assign wdata_w[14] = wr_data_i[11] ; 
                                assign wdata_w[3] = wr_data_i[12] ; 
                                assign wdata_w[7] = wr_data_i[13] ; 
                                assign wdata_w[11] = wr_data_i[14] ; 
                                assign wdata_w[15] = wr_data_i[15] ; 
                                assign waddr_w[(ADDR_WIDTH_W - 1):0] = wr_addr_i ; 
                                assign raddr_w = {rd_addr_i[1:0],rd_addr_i[(ADDR_WIDTH_R - 1):2]} ; 
                                assign rd_data_w[3] = rdata_w[13] ; 
                                assign rd_data_w[2] = rdata_w[9] ; 
                                assign rd_data_w[1] = rdata_w[5] ; 
                                assign rd_data_w[0] = rdata_w[1] ; 
                            end
                        else
                            if (((DATA_WIDTH_W == 16) && (DATA_WIDTH_R == 2))) 
                                begin : genblk5
                                    assign wdata_w[0] = wr_data_i[0] ; 
                                    assign wdata_w[8] = wr_data_i[1] ; 
                                    assign wdata_w[1] = wr_data_i[2] ; 
                                    assign wdata_w[9] = wr_data_i[3] ; 
                                    assign wdata_w[2] = wr_data_i[4] ; 
                                    assign wdata_w[10] = wr_data_i[5] ; 
                                    assign wdata_w[3] = wr_data_i[6] ; 
                                    assign wdata_w[11] = wr_data_i[7] ; 
                                    assign wdata_w[4] = wr_data_i[8] ; 
                                    assign wdata_w[12] = wr_data_i[9] ; 
                                    assign wdata_w[5] = wr_data_i[10] ; 
                                    assign wdata_w[13] = wr_data_i[11] ; 
                                    assign wdata_w[6] = wr_data_i[12] ; 
                                    assign wdata_w[14] = wr_data_i[13] ; 
                                    assign wdata_w[7] = wr_data_i[14] ; 
                                    assign wdata_w[15] = wr_data_i[15] ; 
                                    assign waddr_w[(ADDR_WIDTH_W - 1):0] = wr_addr_i ; 
                                    assign raddr_w = {rd_addr_i[2:0],rd_addr_i[(ADDR_WIDTH_R - 1):3]} ; 
                                    assign rd_data_w[1] = rdata_w[11] ; 
                                    assign rd_data_w[0] = rdata_w[3] ; 
                                end
                            else
                                if (((DATA_WIDTH_W == 8) && (DATA_WIDTH_R == 16))) 
                                    begin : genblk5
                                        assign wdata_w[0] = wr_data_i[0] ; 
                                        assign wdata_w[2] = wr_data_i[1] ; 
                                        assign wdata_w[4] = wr_data_i[2] ; 
                                        assign wdata_w[6] = wr_data_i[3] ; 
                                        assign wdata_w[8] = wr_data_i[4] ; 
                                        assign wdata_w[10] = wr_data_i[5] ; 
                                        assign wdata_w[12] = wr_data_i[6] ; 
                                        assign wdata_w[14] = wr_data_i[7] ; 
                                        assign wdata_w[1] = 1'b0 ; 
                                        assign wdata_w[3] = 1'b0 ; 
                                        assign wdata_w[5] = 1'b0 ; 
                                        assign wdata_w[7] = 1'b0 ; 
                                        assign wdata_w[9] = 1'b0 ; 
                                        assign wdata_w[11] = 1'b0 ; 
                                        assign wdata_w[13] = 1'b0 ; 
                                        assign wdata_w[15] = 1'b0 ; 
                                        assign waddr_w = {wr_addr_i[0],wr_addr_i[(ADDR_WIDTH_W - 1):1]} ; 
                                        assign raddr_w = rd_addr_i ; 
                                        assign rd_data_w[0] = rdata_w[0] ; 
                                        assign rd_data_w[1] = rdata_w[2] ; 
                                        assign rd_data_w[2] = rdata_w[4] ; 
                                        assign rd_data_w[3] = rdata_w[6] ; 
                                        assign rd_data_w[4] = rdata_w[8] ; 
                                        assign rd_data_w[5] = rdata_w[10] ; 
                                        assign rd_data_w[6] = rdata_w[12] ; 
                                        assign rd_data_w[7] = rdata_w[14] ; 
                                        assign rd_data_w[8] = rdata_w[1] ; 
                                        assign rd_data_w[9] = rdata_w[3] ; 
                                        assign rd_data_w[10] = rdata_w[5] ; 
                                        assign rd_data_w[11] = rdata_w[7] ; 
                                        assign rd_data_w[12] = rdata_w[9] ; 
                                        assign rd_data_w[13] = rdata_w[11] ; 
                                        assign rd_data_w[14] = rdata_w[13] ; 
                                        assign rd_data_w[15] = rdata_w[15] ; 
                                    end
                                else
                                    if (((DATA_WIDTH_W == 8) && (DATA_WIDTH_R == 8))) 
                                        begin : genblk5
                                            assign wdata_w[0] = wr_data_i[0] ; 
                                            assign wdata_w[2] = wr_data_i[1] ; 
                                            assign wdata_w[4] = wr_data_i[2] ; 
                                            assign wdata_w[6] = wr_data_i[3] ; 
                                            assign wdata_w[8] = wr_data_i[4] ; 
                                            assign wdata_w[10] = wr_data_i[5] ; 
                                            assign wdata_w[12] = wr_data_i[6] ; 
                                            assign wdata_w[14] = wr_data_i[7] ; 
                                            assign wdata_w[1] = 1'b0 ; 
                                            assign wdata_w[3] = 1'b0 ; 
                                            assign wdata_w[5] = 1'b0 ; 
                                            assign wdata_w[7] = 1'b0 ; 
                                            assign wdata_w[9] = 1'b0 ; 
                                            assign wdata_w[11] = 1'b0 ; 
                                            assign wdata_w[13] = 1'b0 ; 
                                            assign wdata_w[15] = 1'b0 ; 
                                            assign waddr_w = {wr_addr_i} ; 
                                            assign raddr_w = {rd_addr_i} ; 
                                            assign rd_data_w[0] = rdata_w[0] ; 
                                            assign rd_data_w[1] = rdata_w[2] ; 
                                            assign rd_data_w[2] = rdata_w[4] ; 
                                            assign rd_data_w[3] = rdata_w[6] ; 
                                            assign rd_data_w[4] = rdata_w[8] ; 
                                            assign rd_data_w[5] = rdata_w[10] ; 
                                            assign rd_data_w[6] = rdata_w[12] ; 
                                            assign rd_data_w[7] = rdata_w[14] ; 
                                        end
                                    else
                                        if (((DATA_WIDTH_W == 8) && (DATA_WIDTH_R == 4))) 
                                            begin : genblk5
                                                assign wdata_w[0] = wr_data_i[0] ; 
                                                assign wdata_w[4] = wr_data_i[1] ; 
                                                assign wdata_w[8] = wr_data_i[2] ; 
                                                assign wdata_w[12] = wr_data_i[3] ; 
                                                assign wdata_w[2] = wr_data_i[4] ; 
                                                assign wdata_w[6] = wr_data_i[5] ; 
                                                assign wdata_w[10] = wr_data_i[6] ; 
                                                assign wdata_w[14] = wr_data_i[7] ; 
                                                assign wdata_w[1] = 1'b0 ; 
                                                assign wdata_w[3] = 1'b0 ; 
                                                assign wdata_w[5] = 1'b0 ; 
                                                assign wdata_w[7] = 1'b0 ; 
                                                assign wdata_w[9] = 1'b0 ; 
                                                assign wdata_w[11] = 1'b0 ; 
                                                assign wdata_w[13] = 1'b0 ; 
                                                assign wdata_w[15] = 1'b0 ; 
                                                assign waddr_w = {wr_addr_i} ; 
                                                assign raddr_w = {rd_addr_i[0],rd_addr_i[(ADDR_WIDTH_R - 1):1]} ; 
                                                assign rd_data_w[0] = rdata_w[1] ; 
                                                assign rd_data_w[1] = rdata_w[5] ; 
                                                assign rd_data_w[2] = rdata_w[9] ; 
                                                assign rd_data_w[3] = rdata_w[13] ; 
                                            end
                                        else
                                            if (((DATA_WIDTH_W == 8) && (DATA_WIDTH_R == 2))) 
                                                begin : genblk5
                                                    assign wdata_w[0] = wr_data_i[0] ; 
                                                    assign wdata_w[8] = wr_data_i[1] ; 
                                                    assign wdata_w[2] = wr_data_i[2] ; 
                                                    assign wdata_w[10] = wr_data_i[3] ; 
                                                    assign wdata_w[4] = wr_data_i[4] ; 
                                                    assign wdata_w[12] = wr_data_i[5] ; 
                                                    assign wdata_w[6] = wr_data_i[6] ; 
                                                    assign wdata_w[14] = wr_data_i[7] ; 
                                                    assign wdata_w[1] = 1'b0 ; 
                                                    assign wdata_w[3] = 1'b0 ; 
                                                    assign wdata_w[5] = 1'b0 ; 
                                                    assign wdata_w[7] = 1'b0 ; 
                                                    assign wdata_w[9] = 1'b0 ; 
                                                    assign wdata_w[11] = 1'b0 ; 
                                                    assign wdata_w[13] = 1'b0 ; 
                                                    assign wdata_w[15] = 1'b0 ; 
                                                    assign waddr_w = {wr_addr_i} ; 
                                                    assign raddr_w = {rd_addr_i[1:0],rd_addr_i[(ADDR_WIDTH_R - 1):2]} ; 
                                                    assign rd_data_w[1] = rdata_w[11] ; 
                                                    assign rd_data_w[0] = rdata_w[3] ; 
                                                end
                                            else
                                                if (((DATA_WIDTH_W == 4) && (DATA_WIDTH_R == 16))) 
                                                    begin : genblk5
                                                        assign wdata_w[1] = wr_data_i[0] ; 
                                                        assign wdata_w[5] = wr_data_i[1] ; 
                                                        assign wdata_w[9] = wr_data_i[2] ; 
                                                        assign wdata_w[13] = wr_data_i[3] ; 
                                                        assign wdata_w[0] = 1'b0 ; 
                                                        assign wdata_w[4:2] = 3'b000 ; 
                                                        assign wdata_w[8:6] = 3'b000 ; 
                                                        assign wdata_w[12:10] = 3'b000 ; 
                                                        assign wdata_w[15:14] = 2'b00 ; 
                                                        assign waddr_w = {wr_addr_i[1:0],wr_addr_i[(ADDR_WIDTH_W - 1):2]} ; 
                                                        assign raddr_w = rd_addr_i ; 
                                                        assign rd_data_w[0] = rdata_w[0] ; 
                                                        assign rd_data_w[1] = rdata_w[4] ; 
                                                        assign rd_data_w[2] = rdata_w[8] ; 
                                                        assign rd_data_w[3] = rdata_w[12] ; 
                                                        assign rd_data_w[4] = rdata_w[1] ; 
                                                        assign rd_data_w[5] = rdata_w[5] ; 
                                                        assign rd_data_w[6] = rdata_w[9] ; 
                                                        assign rd_data_w[7] = rdata_w[13] ; 
                                                        assign rd_data_w[8] = rdata_w[2] ; 
                                                        assign rd_data_w[9] = rdata_w[6] ; 
                                                        assign rd_data_w[10] = rdata_w[10] ; 
                                                        assign rd_data_w[11] = rdata_w[14] ; 
                                                        assign rd_data_w[12] = rdata_w[3] ; 
                                                        assign rd_data_w[13] = rdata_w[7] ; 
                                                        assign rd_data_w[14] = rdata_w[11] ; 
                                                        assign rd_data_w[15] = rdata_w[15] ; 
                                                    end
                                                else
                                                    if (((DATA_WIDTH_W == 4) && (DATA_WIDTH_R == 8))) 
                                                        begin : genblk5
                                                            assign wdata_w[1] = wr_data_i[0] ; 
                                                            assign wdata_w[5] = wr_data_i[1] ; 
                                                            assign wdata_w[9] = wr_data_i[2] ; 
                                                            assign wdata_w[13] = wr_data_i[3] ; 
                                                            assign wdata_w[0] = 1'b0 ; 
                                                            assign wdata_w[4:2] = 3'b000 ; 
                                                            assign wdata_w[8:6] = 3'b000 ; 
                                                            assign wdata_w[12:10] = 3'b000 ; 
                                                            assign wdata_w[15:14] = 2'b00 ; 
                                                            assign waddr_w = {wr_addr_i[0],wr_addr_i[(ADDR_WIDTH_W - 1):1]} ; 
                                                            assign raddr_w = rd_addr_i ; 
                                                            assign rd_data_w[0] = rdata_w[0] ; 
                                                            assign rd_data_w[1] = rdata_w[4] ; 
                                                            assign rd_data_w[2] = rdata_w[8] ; 
                                                            assign rd_data_w[3] = rdata_w[12] ; 
                                                            assign rd_data_w[4] = rdata_w[2] ; 
                                                            assign rd_data_w[5] = rdata_w[6] ; 
                                                            assign rd_data_w[6] = rdata_w[10] ; 
                                                            assign rd_data_w[7] = rdata_w[14] ; 
                                                        end
                                                    else
                                                        if (((DATA_WIDTH_W == 4) && (DATA_WIDTH_R == 4))) 
                                                            begin : genblk5
                                                                assign wdata_w[1] = wr_data_i[0] ; 
                                                                assign wdata_w[5] = wr_data_i[1] ; 
                                                                assign wdata_w[9] = wr_data_i[2] ; 
                                                                assign wdata_w[13] = wr_data_i[3] ; 
                                                                assign wdata_w[0] = 1'b0 ; 
                                                                assign wdata_w[4:2] = 3'b000 ; 
                                                                assign wdata_w[8:6] = 3'b000 ; 
                                                                assign wdata_w[12:10] = 3'b000 ; 
                                                                assign wdata_w[15:14] = 2'b00 ; 
                                                                assign waddr_w[(ADDR_WIDTH_W - 1):0] = wr_addr_i ; 
                                                                assign raddr_w[(ADDR_WIDTH_R - 1):0] = rd_addr_i ; 
                                                                assign rd_data_w[0] = rdata_w[1] ; 
                                                                assign rd_data_w[1] = rdata_w[5] ; 
                                                                assign rd_data_w[2] = rdata_w[9] ; 
                                                                assign rd_data_w[3] = rdata_w[13] ; 
                                                            end
                                                        else
                                                            if (((DATA_WIDTH_W == 4) && (DATA_WIDTH_R == 2))) 
                                                                begin : genblk5
                                                                    assign wdata_w[1] = wr_data_i[0] ; 
                                                                    assign wdata_w[9] = wr_data_i[1] ; 
                                                                    assign wdata_w[5] = wr_data_i[2] ; 
                                                                    assign wdata_w[13] = wr_data_i[3] ; 
                                                                    assign wdata_w[0] = 1'b0 ; 
                                                                    assign wdata_w[4:2] = 3'b000 ; 
                                                                    assign wdata_w[8:6] = 3'b000 ; 
                                                                    assign wdata_w[12:10] = 3'b000 ; 
                                                                    assign wdata_w[15:14] = 2'b00 ; 
                                                                    assign waddr_w[(ADDR_WIDTH_W - 1):0] = wr_addr_i ; 
                                                                    assign raddr_w = {rd_addr_i[0],rd_addr_i[(ADDR_WIDTH_R - 1):1]} ; 
                                                                    assign rd_data_w[1] = rdata_w[11] ; 
                                                                    assign rd_data_w[0] = rdata_w[3] ; 
                                                                end
                                                            else
                                                                if (((DATA_WIDTH_W == 2) && (DATA_WIDTH_R == 16))) 
                                                                    begin : genblk5
                                                                        assign wdata_w[11] = wr_data_i[1] ; 
                                                                        assign wdata_w[3] = wr_data_i[0] ; 
                                                                        assign wdata_w[2:0] = 3'b000 ; 
                                                                        assign wdata_w[10:4] = 7'h00 ; 
                                                                        assign wdata_w[15:12] = 4'h0 ; 
                                                                        assign waddr_w = {wr_addr_i[2:0],wr_addr_i[(ADDR_WIDTH_W - 1):3]} ; 
                                                                        assign raddr_w = rd_addr_i ; 
                                                                        assign rd_data_w[0] = rdata_w[0] ; 
                                                                        assign rd_data_w[1] = rdata_w[8] ; 
                                                                        assign rd_data_w[2] = rdata_w[1] ; 
                                                                        assign rd_data_w[3] = rdata_w[9] ; 
                                                                        assign rd_data_w[4] = rdata_w[2] ; 
                                                                        assign rd_data_w[5] = rdata_w[10] ; 
                                                                        assign rd_data_w[6] = rdata_w[3] ; 
                                                                        assign rd_data_w[7] = rdata_w[11] ; 
                                                                        assign rd_data_w[8] = rdata_w[4] ; 
                                                                        assign rd_data_w[9] = rdata_w[12] ; 
                                                                        assign rd_data_w[10] = rdata_w[5] ; 
                                                                        assign rd_data_w[11] = rdata_w[13] ; 
                                                                        assign rd_data_w[12] = rdata_w[6] ; 
                                                                        assign rd_data_w[13] = rdata_w[14] ; 
                                                                        assign rd_data_w[14] = rdata_w[7] ; 
                                                                        assign rd_data_w[15] = rdata_w[15] ; 
                                                                    end
                                                                else
                                                                    if (((DATA_WIDTH_W == 2) && (DATA_WIDTH_R == 8))) 
                                                                        begin : genblk5
                                                                            assign wdata_w[11] = wr_data_i[1] ; 
                                                                            assign wdata_w[3] = wr_data_i[0] ; 
                                                                            assign wdata_w[2:0] = 3'b000 ; 
                                                                            assign wdata_w[10:4] = 7'h00 ; 
                                                                            assign wdata_w[15:12] = 4'h0 ; 
                                                                            assign waddr_w = {wr_addr_i[1:0],wr_addr_i[(ADDR_WIDTH_W - 1):2]} ; 
                                                                            assign raddr_w = rd_addr_i ; 
                                                                            assign rd_data_w[0] = rdata_w[0] ; 
                                                                            assign rd_data_w[1] = rdata_w[8] ; 
                                                                            assign rd_data_w[2] = rdata_w[2] ; 
                                                                            assign rd_data_w[3] = rdata_w[10] ; 
                                                                            assign rd_data_w[4] = rdata_w[4] ; 
                                                                            assign rd_data_w[5] = rdata_w[12] ; 
                                                                            assign rd_data_w[6] = rdata_w[6] ; 
                                                                            assign rd_data_w[7] = rdata_w[14] ; 
                                                                        end
                                                                    else
                                                                        if (((DATA_WIDTH_W == 2) && (DATA_WIDTH_R == 4))) 
                                                                            begin : genblk5
                                                                                assign wdata_w[11] = wr_data_i[1] ; 
                                                                                assign wdata_w[3] = wr_data_i[0] ; 
                                                                                assign wdata_w[2:0] = 3'b000 ; 
                                                                                assign wdata_w[10:4] = 7'h00 ; 
                                                                                assign wdata_w[15:12] = 4'h0 ; 
                                                                                assign waddr_w = {wr_addr_i[0],wr_addr_i[(ADDR_WIDTH_W - 1):1]} ; 
                                                                                assign raddr_w = rd_addr_i ; 
                                                                                assign rd_data_w[0] = rdata_w[1] ; 
                                                                                assign rd_data_w[1] = rdata_w[9] ; 
                                                                                assign rd_data_w[2] = rdata_w[5] ; 
                                                                                assign rd_data_w[3] = rdata_w[13] ; 
                                                                            end
                                                                        else
                                                                            begin : genblk5
                                                                                assign wdata_w[11] = wr_data_i[1] ; 
                                                                                assign wdata_w[3] = wr_data_i[0] ; 
                                                                                assign wdata_w[2:0] = 3'b000 ; 
                                                                                assign wdata_w[10:4] = 7'h00 ; 
                                                                                assign wdata_w[15:12] = 4'h0 ; 
                                                                                assign waddr_w = wr_addr_i ; 
                                                                                assign raddr_w = rd_addr_i ; 
                                                                                assign rd_data_w[0] = rdata_w[3] ; 
                                                                                assign rd_data_w[1] = rdata_w[11] ; 
                                                                            end
                wire t_wr_en_i = ((BYTE_ENABLE == 0) ? wr_en_i : ((BYTE_WIDTH > 1) ? wr_en_i : (wr_en_i & ben_i))) ; 
                PDP4K u_mem0 (.ADR(raddr_w), .ADW(waddr_w), .DI(wdata_w), .MASK_N(mask_t_w), .CER(rd_clk_en_i), .CKR(rd_clk_i), .RE(rd_en_i), .CEW(wr_clk_en_i), .CKW(wr_clk_i), .WE(t_wr_en_i), .DO(rdata_w)) ; 
                localparam R = ((DATA_WIDTH_R == 16) ? "16" : ((DATA_WIDTH_R == 8) ? "8" : ((DATA_WIDTH_R == 4) ? "4" : "2"))) ; 
                localparam W = ((DATA_WIDTH_W == 16) ? "16" : ((DATA_WIDTH_W == 8) ? "8" : ((DATA_WIDTH_W == 4) ? "4" : "2"))) ; 
                localparam X_T0 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T1 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T2 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T3 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T4 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T5 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T6 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T7 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T8 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_T9 = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_TA = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_TB = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_TC = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_TD = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_TE = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X_TF = ((INIT_MODE == "all_one") ? "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" : "0x0000000000000000000000000000000000000000000000000000000000000000") ; 
                localparam X0 = ((INIT_MODE == "mem_file") ? INIT_VALUE_00 : X_T0) ; 
                localparam X1 = ((INIT_MODE == "mem_file") ? INIT_VALUE_01 : X_T1) ; 
                localparam X2 = ((INIT_MODE == "mem_file") ? INIT_VALUE_02 : X_T2) ; 
                localparam X3 = ((INIT_MODE == "mem_file") ? INIT_VALUE_03 : X_T3) ; 
                localparam X4 = ((INIT_MODE == "mem_file") ? INIT_VALUE_04 : X_T4) ; 
                localparam X5 = ((INIT_MODE == "mem_file") ? INIT_VALUE_05 : X_T5) ; 
                localparam X6 = ((INIT_MODE == "mem_file") ? INIT_VALUE_06 : X_T6) ; 
                localparam X7 = ((INIT_MODE == "mem_file") ? INIT_VALUE_07 : X_T7) ; 
                localparam X8 = ((INIT_MODE == "mem_file") ? INIT_VALUE_08 : X_T8) ; 
                localparam X9 = ((INIT_MODE == "mem_file") ? INIT_VALUE_09 : X_T9) ; 
                localparam XA = ((INIT_MODE == "mem_file") ? INIT_VALUE_0A : X_TA) ; 
                localparam XB = ((INIT_MODE == "mem_file") ? INIT_VALUE_0B : X_TB) ; 
                localparam XC = ((INIT_MODE == "mem_file") ? INIT_VALUE_0C : X_TC) ; 
                localparam XD = ((INIT_MODE == "mem_file") ? INIT_VALUE_0D : X_TD) ; 
                localparam XE = ((INIT_MODE == "mem_file") ? INIT_VALUE_0E : X_TE) ; 
                localparam XF = ((INIT_MODE == "mem_file") ? INIT_VALUE_0F : X_TF) ; 
                defparam u_mem0.DATA_WIDTH_W = W ; 
                defparam u_mem0.DATA_WIDTH_R = R ; 
                defparam u_mem0.INITVAL_0 = X0 ; 
                defparam u_mem0.INITVAL_1 = X1 ; 
                defparam u_mem0.INITVAL_2 = X2 ; 
                defparam u_mem0.INITVAL_3 = X3 ; 
                defparam u_mem0.INITVAL_4 = X4 ; 
                defparam u_mem0.INITVAL_5 = X5 ; 
                defparam u_mem0.INITVAL_6 = X6 ; 
                defparam u_mem0.INITVAL_7 = X7 ; 
                defparam u_mem0.INITVAL_8 = X8 ; 
                defparam u_mem0.INITVAL_9 = X9 ; 
                defparam u_mem0.INITVAL_A = XA ; 
                defparam u_mem0.INITVAL_B = XB ; 
                defparam u_mem0.INITVAL_C = XC ; 
                defparam u_mem0.INITVAL_D = XD ; 
                defparam u_mem0.INITVAL_E = XE ; 
                defparam u_mem0.INITVAL_F = XF ; 
                if ((REGMODE == "reg")) 
                    begin : genblk6
                        reg [(DATA_WIDTH_R - 1):0] rd_buff_r ; 
                        assign rd_data_o = rd_buff_r ; 
                        if ((RESETMODE == "sync")) 
                            begin : genblk1
                                always
                                    @(posedge rd_clk_i)
                                    begin
                                        if ((rst_i == 1'b1)) 
                                            begin
                                                rd_buff_r <=  'h0 ;
                                            end
                                        else
                                            begin
                                                if ((rd_out_clk_en_i == 1'b1)) 
                                                    begin
                                                        rd_buff_r <=  rd_data_w ;
                                                    end
                                            end
                                    end
                            end
                        else
                            if ((RESET_RELEASE == "sync")) 
                                begin : genblk1
                                    always
                                        @(posedge rd_clk_i or posedge rst_i)
                                        begin
                                            if ((rst_i == 1'b1)) 
                                                begin
                                                    rd_buff_r <=  'h0 ;
                                                end
                                            else
                                                begin
                                                    if ((rd_out_clk_en_i == 1'b1)) 
                                                        begin
                                                            rd_buff_r <=  rd_data_w ;
                                                        end
                                                end
                                        end
                                end
                            else
                                begin : genblk1
                                    always
                                        @(*)
                                        begin
                                            if ((rst_i == 1'b1)) 
                                                begin
                                                    rd_buff_r = 'h0 ;
                                                end
                                            else
                                                begin
                                                    if ((rd_out_clk_en_i == 1'b1)) 
                                                        begin
                                                            rd_buff_r = rd_data_w ;
                                                        end
                                                end
                                        end
                                end
                    end
                else
                    begin : genblk6
                        assign rd_data_o = rd_data_w ; 
                    end
            end
    endgenerate
    //------------------------------------------------------------------------------
    // Function Definition
    //------------------------------------------------------------------------------
    function [31:0] getByteWidth ; 
        input [31:0] data_width ; 
        begin
            if ((data_width == 16)) 
                getByteWidth = 2 ;
            else
                getByteWidth = 1 ;
        end
    endfunction
    function [31:0] getAddrWidth ; 
        input [31:0] data_width ; 
        begin
            case (data_width)
            16 : 
                getAddrWidth = 8 ;
            8 : 
                getAddrWidth = 9 ;
            4 : 
                getAddrWidth = 10 ;
            2 : 
                getAddrWidth = 11 ;
            endcase 
        end
    endfunction

//=============================================================================
// lscc_fifo_mem_core.v
// Local Variables:
// verilog-library-directories: ("../../common")
// End:
//=============================================================================
endmodule


